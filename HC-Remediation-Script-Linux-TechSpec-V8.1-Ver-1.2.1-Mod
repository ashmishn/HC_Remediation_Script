#!/bin/bash 
#########################################################################################################
# Author   : Ashutosh Mishra                              			#
# Email    : Ashutosh.Mishra@kyndryl.com                              			#
# Platform : Linux RHEL7 and RHEL8			     	        	    			#
# Script   : Shell script					                    			#
# Title    : Health check script for Techspecs Linux-V8.1, SSH-V6.0 and SUDO-V7.1                            			#	     
#########################################################################################################
if [ -f hc_remediation_parameter ]
then

rm -rf temp_shadow temp_shadow1 temp1_shadow temp_shadow2 temp-ud psw_temp temp_uid temp_uid1 temp_gid temp_gid1 pasd_temp p5 p4 p3 p2 p1 p6 p12 f1 t1 temp_pam.so file1 log_file1 log_file2 world-writable-test temp_id ff2 e1 e2 e3 e4 e5 e6 temp_home user

clear
pause(){
  read -p "Press [Enter] key to continue..." fackEnterKey
}
#z=`hostname`
#c=`date | awk '{print $1"-"$2"-"$3"-"$6"-"$4}'`

z=`hostname`
fqdn=`hostname --fqdn`
ipAddress=`hostname -i` 
osName=`cat /etc/redhat-release`
c=`date | awk '{print $1"-"$2"-"$3"-"$6"-"$4}'`
timestamp=`date '+%Y-%m-%d-%H%M%S%N'`

# please provide the below details while customising the Scan script.
#-------------------------------------------------------------------
accountName="Account name put here"
accountID="Account ID put Here"
customisedDate="10/12/2020"
scanVersion="V1.1"
techSpecVersion="Linux V7.2 SSH v5.2  Sudo v6.1 "
#-------------------------------------------------------------------

echo "FQDN" >>en1
echo "IP-ADDRESS" >>en2
echo "OS-NAME" >>en3
echo "TIMESTAMP" >> en4
echo "SECTION-HEADING" >>p1
echo "SYSTEM-VALUE/PARAMETER" >>p2
echo "CURRENT-VALUE" >>p3
echo "SECTION-ID" >>p12
echo "HOST-NAME" >>p6
echo "TEST-RESULT" >>p4
echo "SCAN-DATE" >>p5

serv=`whereis service |awk '{print $2}'`

PASS_MAX_DAYS=`cat hc_remediation_parameter |grep ^PASS_MAX_DAYS |awk '{print $2}'`
PASS_MIN_DAYS=`cat hc_remediation_parameter |grep ^PASS_MIN_DAYS |awk '{print $2}'`
PASS_MIN_LENGTH=`cat hc_remediation_parameter |grep ^PASS_MIN_LENGTH |awk '{print $2}'`
DIGIT=`cat hc_remediation_parameter |grep ^DIGIT |awk '{print $2}'`
UPPER_CASE=`cat hc_remediation_parameter |grep ^UPPER_CASE |awk '{print $2}'`
LOWER_CASE=`cat hc_remediation_parameter |grep ^LOWER_CASE |awk '{print $2}'`
OTHER_CHAR=`cat hc_remediation_parameter |grep ^OTHER_CHAR |awk '{print $2}'`
LOG_ROTATE=`cat hc_remediation_parameter |grep ^LOG_ROTATE |awk '{print $2}'`
PAM_REMEMBER=`cat hc_remediation_parameter |grep ^PAM_REMEMBER |awk '{print $2}'`
UMASK_VAL=`cat hc_remediation_parameter |grep ^UMASK_VAL |awk '{print $2}'`
UMASK_BASHRC_VAL=`cat hc_remediation_parameter |grep ^UMASK_BASHRC_VAL |awk '{print $2}'`
PERMITROOTLOGIN=`cat hc_remediation_parameter |grep ^PERMITROOTLOGIN |awk '{print $2}'`
PERMITEMPTYPASSWORDS=`cat hc_remediation_parameter |grep ^PERMITEMPTYPASSWORDS |awk '{print $2}'`
PERMITUSERENVIRONMENT=`cat hc_remediation_parameter |grep ^PERMITUSERENVIRONMENT |awk '{print $2}'`
TCPKEEPALIVE=`cat hc_remediation_parameter |grep ^TCPKEEPALIVE |awk '{print $2}'`
MAXSTARTUPS=`cat hc_remediation_parameter |grep ^MAXSTARTUPS |awk '{print $2}'`
MAXAUTHTRIES=`cat hc_remediation_parameter |grep ^MAXAUTHTRIES |awk '{print $2}'`
LOGINGRACETIME=`cat hc_remediation_parameter |grep ^LOGINGRACETIME |awk '{print $2}'`
KEYREGENERATIONINTERVAL=`cat hc_remediation_parameter |grep ^KEYREGENERATIONINTERVAL |awk '{print $2}'`
LOGLEVEL=`cat hc_remediation_parameter |grep ^LOGLEVEL |awk '{print $2}'`
GATEWAYPORTS=`cat hc_remediation_parameter |grep ^GATEWAYPORTS |awk '{print $2}'`
STRICTMODES=`cat hc_remediation_parameter |grep ^STRICTMODES |awk '{print $2}'`
PRINTMOTD=`cat hc_remediation_parameter |grep ^PRINTMOTD |awk '{print $2}'`
LOG_ROTATE_WEEK=`cat hc_remediation_parameter |grep ^LOG_ROTATE_WEEK |awk '{print $2}'`
LOG_ROTATE_MONTH=`cat hc_remediation_parameter |grep ^LOG_ROTATE_MONTH |awk '{print $2}'`
SHARED_ID_VAULTED=`cat hc_remediation_parameter |grep ^SHARED_ID_VAULTED |awk '{print $2}'`
TMOUT=`cat hc_remediation_parameter |grep ^TMOUT |awk '{print $2}'`
AUTOLOGOUT=`cat hc_remediation_parameter |grep ^AUTOLOGOUT |awk '{print $2}'`
SYSLOG_IP=`cat hc_remediation_parameter |grep ^SYSLOG_IP |awk '{print $2}'`
NFS_USE=`cat hc_remediation_parameter |grep ^NFS_USE |awk -F: '{print $2}'`
FTP_USE=`cat hc_remediation_parameter |grep ^FTP_USE |awk -F: '{print $2}'`
LDAP_USE=`cat hc_remediation_parameter |grep ^LDAP_USE |awk -F: '{print $2}'`
SQUID_PROXY_USE=`cat hc_remediation_parameter |grep ^SQUID_PROXY_USE |awk -F: '{print $2}'`
DNS_SERVER_USE=`cat hc_remediation_parameter |grep ^DNS_SERVER_USE |awk -F: '{print $2}'`
HTTP_USE=`cat hc_remediation_parameter |grep ^HTTP_USE |awk -F: '{print $2}'`
TELNET_USE=`cat hc_remediation_parameter |grep ^HTTP_USE |awk -F: '{print $2}'`
TELNET_SERVER_USE=`cat hc_remediation_parameter |grep ^HTTP_USE |awk -F: '{print $2}'`
############################################################################################################

mkdir /var/tmp/os_config_backup_$CHNG_NUMBER
cp -p /etc/login.defs /var/tmp/os_config_backup_$CHNG_NUMBER
cp -p /etc/yum.conf /var/tmp/os_config_backup_$CHNG_NUMBER
cp -p /etc/shadow /var/tmp/os_config_backup_$CHNG_NUMBER
cp -p /etc/ssh/sshd_config /etc/ssh/sshd_config_$CHNG_NUMBER
cp -p /etc/pam.d/password-auth /etc/pam.d/password-auth_$CHNG_NUMBER
cp -p /etc/pam.d/system-auth /etc/pam.d/system-auth_$CHNG_NUMBER
cp -p /etc/logrotate.conf /etc/logrotate.conf_$CHNG_NUMBER
sshd -T > sshd_configuration_$CHNG_NUMBER
sysctl -a > sysctl_configuration_$CHNG_NUMBER








#IZ.1.2.4.3 
grep -v '^\s*#' /etc/pam.d/password-auth /etc/pam.d/system-auth | grep pam_faillock.so
if [ $? -eq 0 ] ; then
	if [ -d /var/run/faillock ] ; then
		echo "Logging" >>p1
		echo "Directory must exist for all systems using pam_faillock." >>p2
		echo "Directory exists for all systems using pam_faillock." >>p3
		echo "IZ.1.2.4.3">>p12
		echo "yes" >>p4
			echo "$c" >> p5
			echo "$z" >>p6
 			
	else
		mkdir /var/run/faillock
		chown root:root /var/run/faillock
		chmod 750 /var/run/faillock
		echo "Logging" >>p1
		echo "Directory must exist for all systems using pam_faillock." >>p2
		echo "Directory /var/run/faillock created for all systems using pam_faillock." >>p3
		echo "IZ.1.2.4.3">>p12
		echo "Modified" >>p4
			echo "$c" >> p5
			echo "$z" >>p6
	fi
else
	echo "Logging" >>p1
	echo "Directory must exist for all systems using pam_faillock." >>p2
	echo "pam_faillock module not exist in pasword-auth and system-auth" >>p3
	echo "IZ.1.2.4.3">>p12
	echo "yes" >>p4
			echo "$c" >> p5
			echo "$z" >>p6
 		
fi

#IZ.1.4.6.1
sp=`cat /etc/profile | grep -v '^\s*#' | egrep '^\s*TMOUT|/etc/profile.d/|done|\s*\.' |wc -l`
sl=`cat /etc/profile | grep -v '^\s*#' | egrep 'TMOUT|/etc/profile.d/|done|\s*\.' |egrep '.*/etc/profile.d/Kyndrylsinit.sh|.*/etc/profile.d/Kyndrylsinit.sh' |wc -l`
sm=`cat /etc/profile | grep -v '^\s*#' | egrep '^\s*TMOUT|/etc/profile.d/|done|\s*\.' |grep TMOUT |wc -l`
if [ $sp -gt 0 ] && [ $sl -gt 0 ] && [ $sm -ge 0 ]
then
	sk=`cat /etc/profile | grep -v '^\s*#' | egrep "for.*i|done" |grep TMOUT |head -1 |wc -l`
	sn=`cat /etc/profile | grep -v '^\s*#' | egrep "for.*i|done|TMOUT" |tail -1 |grep TMOUT |wc -l`
	if [ $sk -ge 0 ] && [ $sn -eq 0 ]
	then
		echo "System Settings" >>p1
		echo "Set systems to terminate a session after a period of inactivity - /etc/profile" >>p2
		echo "Session terminate setting is correct in /etc/profile" >>p3
		echo "IZ.1.4.6.1">>p12
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
	else

		echo "System Settings" >>p1
		echo "Set systems to terminate a session after a period of inactivity - /etc/profile" >>p2
		echo "Session terminate setting is not correct in /etc/profile. Please refer Techspec" >>p3
		echo "IZ.1.4.6.1">>p12
		echo "no" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
	fi
else
		echo "System Settings" >>p1
		echo "Set systems to terminate a session after a period of inactivity - /etc/profile" >>p2
		echo "Session terminate setting is not correct in /etc/profile" >>p3
		echo "IZ.1.4.6.1">>p12
		echo "no" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
fi

#IZ.1.4.6.2
flag=0
sk=`which csh`
if [ $? -eq 0 ] ; then
	sk=`cat /etc/csh.login | grep -v '^\s*#' | egrep 'autologout|/etc/profile.d/|\s*source' | grep 'foreach i ( /etc/profile.d/\*.csh /etc/profile.d/csh.local )'`
	if [ $? -eq 0 ] ; then
		sk=`cat /etc/csh.login | grep -v '^\s*#' | egrep 'autologout|/etc/profile.d/|\s*source' | grep -v 'source "$i" >& /dev/null' | grep 'source "$i"'`
		if [ $? -eq 0 ] ; then
			sk=`cat /etc/csh.login | grep -v '^\s*#' | egrep 'autologout|/etc/profile.d/|\s*source' | grep 'source "$i" >& /dev/null'`
			if [ $? -eq 0 ] ; then
				flag=1
			fi
		fi
	fi
	
else
	flag=1
fi
sk=`cat /etc/csh.login | grep -v '^\s*#' | egrep 'autologout|/etc/profile.d/|\s*source' | grep 'set autologout=31'`
if [ $? -eq 0 ] ; then
	sk=`cat /etc/csh.login | grep -v '^\s*#' | egrep 'autologout|/etc/profile.d/|\s*source' | grep 'source /etc/profile.d/Kyndrylsinit.csh'`
	if [ $? -eq 0 ] ; then
		flag=1
	fi
fi
if [ $flag == 1 ] ; then

	echo "System Settings" >>p1
	echo "Set systems to terminate a session after a period of inactivity - /etc/csh.login" >>p2
	echo "Systems terminates a session after a period of inactivity - /etc/csh.login" >>p3
	echo "IZ.1.4.6.2">>p12
	echo "yes" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
else

	echo "System Settings" >>p1
	echo "Set systems to terminate a session after a period of inactivity - /etc/csh.login" >>p2
	echo "Systems does not terminate a session after a period of inactivity - /etc/csh.login" >>p3
	echo "IZ.1.4.6.2">>p12
	echo "no" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
fi


#IZ.1.4.6.3
if [ -f /etc/profile.d/Kyndrylsinit.sh ] ; then
	grep '^[^#]*TMOUT' /etc/profile.d/Kyndrylsinit.sh
	if [ $? -eq 0 ]
	then
	sk=`grep '^[^#]*TMOUT' /etc/profile.d/Kyndrylsinit.sh |grep "TMOUT.*=" | awk -F '=' '{print $2}'`
		if [ "$sk" == "$TMOUT" ] ; then
			echo "System Settings" >>p1
			echo "Set systems to terminate a session after a period of inactivity - /etc/profile.d/Kyndrylsinit.sh" >>p2
			echo "TMOUT value is specified as $sk in /etc/profile.d/Kyndrylsinit.sh - Valid" >>p3
			echo "IZ.1.4.6.3">>p12
			echo "yes" >>p4
			echo "$c" >> p5
			echo "$z" >>p6
		else

			echo "System Settings" >>p1
			echo "Set systems to terminate a session after a period of inactivity - /etc/profile.d/Kyndrylsinit.sh" >>p2
			echo "TMOUT value is specified as $sk in /etc/profile.d/Kyndrylsinit.sh - Invalid" >>p3
			echo "IZ.1.4.6.3">>p12
			echo "no" >>p4
			echo "$c" >> p5
			echo "$z" >>p6
		fi
	else
			echo "System Settings" >>p1
			echo "Set systems to terminate a session after a period of inactivity - /etc/profile.d/Kyndrylsinit.sh" >>p2
			echo "TMOUT is not mentioned in file /etc/profile.d/Kyndrylsinit.sh" >>p3
			echo "IZ.1.4.6.3">>p12
			echo "no" >>p4
			echo "$c" >> p5
			echo "$z" >>p6
	fi
else
			echo "System Settings" >>p1
			echo "Set systems to terminate a session after a period of inactivity - /etc/profile.d/Kyndrylsinit.sh" >>p2
			echo "File not found /etc/profile.d/Kyndrylsinit.sh" >>p3
			echo "IZ.1.4.6.3">>p12
			echo "no" >>p4
			echo "$c" >> p5
			echo "$z" >>p6
fi

#IZ.1.4.6.4
if [ -f /etc/profile.d/Kyndrylsinit.csh ] ; then
	sk=`grep '^[^#]*set \s*autologout' /etc/profile.d/Kyndrylsinit.csh | awk -F '=' '{print $2}'`
	if [ $? -eq 0 ]; then
		if [ "$sk" == "$AUTOLOGOUT" ] ; then
			echo "System Settings" >>p1
			echo "Set systems to terminate a session after a period of inactivity - /etc/profile.d/Kyndrylsinit.csh" >>p2
			echo "autologout setting is set as $AUTOLOGOUT in /etc/profile.d/Kyndrylsinit.csh - valid" >>p3
			echo "IZ.1.4.6.4">>p12
			echo "yes" >>p4
			echo "$c" >> p5
			echo "$z" >>p6
		else

			echo "System Settings" >>p1
			echo "Set systems to terminate a session after a period of inactivity - /etc/profile.d/Kyndrylsinit.csh" >>p2
			echo "autologout setting is set as $AUTOLOGOUT in /etc/profile.d/Kyndrylsinit.csh - invalid" >>p3
			echo "IZ.1.4.6.4">>p12
			echo "no" >>p4
			echo "$c" >> p5
			echo "$z" >>p6
		fi
	else
		echo "System Settings" >>p1
		echo "Set systems to terminate a session after a period of inactivity - /etc/profile.d/Kyndrylsinit.csh" >>p2
		echo "autologout setting not available in /etc/profile.d/Kyndrylsinit.csh" >>p3
		echo "IZ.1.4.6.4">>p12
		echo "no" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
	fi
else

	echo "System Settings" >>p1
	echo "Set systems to terminate a session after a period of inactivity - /etc/profile.d/Kyndrylsinit.csh" >>p2
	echo "File not found /etc/profile.d/Kyndrylsinit.csh" >>p3
	echo "IZ.1.4.6.4">>p12
	echo "no" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
fi


#IZ.1.4.6.5
flag=0
if [ -f /etc/skel/.cshrc ] ; then
	sk=`grep '^[^#]*TMOUT' /etc/skel/.cshrc | grep '^\s*TMOUT' | awk -F '=' '{print $2}'`
	if [ "$sk" != '' ] && [ $sk -le $TMOUT ] ; then
		sk=`grep '^[^#]*set \s*autologout' /etc/skel/.cshrc | awk -F '=' '{print $2}'`
		if [ "$sk" != '' ] && [ $sk -le $AUTOLOGOUT ] ; then
			flag=1
		else
			flag=0
		fi
	else
		flag=0
	fi
else
	flag=1
fi
if [ -f /etc/skel/.login ] ; then
	sk=`grep '^[^#]*TMOUT' /etc/skel/.login | grep '^\s*TMOUT' | awk -F '=' '{print $2}'`
	if [ "$sk" != '' ] && [ $sk -le $TMOUT ] ; then
		sk=`grep '^[^#]*set \s*autologout' /etc/skel/.login | awk -F '=' '{print $2}'`
		if [ "$sk" != '' ] && [ $sk -le $AUTOLOGOUT ] ; then
			flag=1
		else
			flag=0
		fi
	else
		flag=0
	fi
else
	flag=1
fi
if [ -f /etc/skel/.profile ] ; then
	sk=`grep '^[^#]*TMOUT' /etc/skel/.profile | grep '^\s*TMOUT' | awk -F '=' '{print $2}'`
	if [ "$sk" != '' ] && [ $sk -le $TMOUT ] ; then
		sk=`grep '^[^#]*set \s*autologout' /etc/skel/.profile | awk -F '=' '{print $2}'`
		if [ "$sk" != '' ] && [ $sk -le $AUTOLOGOUT ] ; then
			flag=1
		else
			flag=0
		fi
	else
		flag=0
	fi
else
	flag=1
fi
if [ -f /etc/skel/.tcshrc ] ; then
	sk=`grep '^[^#]*TMOUT' /etc/skel/.tcshrc | grep '^\s*TMOUT' | awk -F '=' '{print $2}'`
	if [ "$sk" != '' ] && [ $sk -le $TMOUT ] ; then
		sk=`grep '^[^#]*set \s*autologout' /etc/skel/.tcshrc | awk -F '=' '{print $2}'`
		if [ "$sk" != '' ] && [ $sk -le $AUTOLOGOUT ] ; then
			flag=1
		else
			flag=0
		fi
	else
		flag=0
	fi
else
	flag=1
fi
if [ -f /etc/skel/.bashrc ] ; then
	sk=`grep '^[^#]*TMOUT' /etc/skel/.bashrc | grep '^\s*TMOUT' | awk -F '=' '{print $2}'`
	if [ "$sk" != '' ] && [ $sk -le $TMOUT ] ; then
		sk=`grep '^[^#]*set \s*autologout' /etc/skel/.bashrc | awk -F '=' '{print $2}'`
		if [ "$sk" != '' ] && [ $sk -le $AUTOLOGOUT ] ; then
			flag=1
		else
			flag=0
		fi
	else
		flag=0
	fi
else
	flag=1
fi
if [ -f /etc/skel/.bash_profile ] ; then
	sk=`grep '^[^#]*TMOUT' /etc/skel/.bash_profile | grep '^\s*TMOUT' | awk -F '=' '{print $2}'`
	if [ "$sk" != '' ] && [ $sk -le $TMOUT ] ; then
		sk=`grep '^[^#]*set \s*autologout' /etc/skel/.bash_profile | awk -F '=' '{print $2}'`
		if [ "$sk" != '' ] && [ $sk -le $AUTOLOGOUT ] ; then
			flag=1
		else
			flag=0
		fi
	else
		flag=0
	fi
else
	flag=1
fi
if [ -f /etc/skel/.bash_login ] ; then
	sk=`grep '^[^#]*TMOUT' /etc/skel/.bash_login | grep '^\s*TMOUT' | awk -F '=' '{print $2}'`
	if [ "$sk" != '' ] && [ $sk -le $TMOUT ] ; then
		sk=`grep '^[^#]*set \s*autologout' /etc/skel/.bash_login | awk -F '=' '{print $2}'`
		if [ "$sk" != '' ] && [ $sk -le $AUTOLOGOUT ] ; then
			flag=1
		else
			flag=0
		fi
	else
		flag=0
	fi
else
	flag=1
fi
if [ $flag == 1 ] ; then

	echo "System Settings" >>p1
	echo "Ensure time out value is not overridden or is correctly established inside skeleton files." >>p2
	echo "time out value is not overridden or is correctly established inside skeleton files." >>p3
	echo "IZ.1.4.6.5">>p12
	echo "yes" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
else

	echo "System Settings" >>p1
	echo "Ensure time out value is not overridden or is correctly established inside skeleton files." >>p2
	echo "time out value is overridden or is not correctly established inside skeleton files." >>p3
	echo "IZ.1.4.6.5">>p12
	echo "no" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
fi

#IZ.1.4.6.6
flag=1
Shells='/bin/csh|/bin/tcsh|/bin/sh|/bin/ksh|/bin/bash|/bin/sh|/bin/false|/sbin/nologin|/usr/bin/sh|/usr/bin/bash|/usr/sbin/nologin|/bin/ksh93|/usr/bin/ksh|/usr/bin/rksh|/usr/bin/ksh93|'
cat /etc/passwd | egrep -v '^sync:.*:/bin/sync\s*$|^halt:.*:/sbin/halt\s*$|^shutdown:.*:/sbin/shutdown\s*$' |
{ while read ENTRY
do
	SHELL=$(echo $ENTRY | awk -F: '{printf $7"\n"}')
	Uid=$(echo $ENTRY | awk -F: '{printf $1"\n"}')
	[[ "$SHELL" != @($Shells) ]] && flag=0
done 
if [ $flag == 1 ] ; then

	echo "System Settings" >>p1
	echo "Ensure login shell supports autologout/TMOUT function" >>p2
	echo "login shell supports autologout/TMOUT function" >>p3
	echo "IZ.1.4.6.6">>p12
	echo "yes" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
else
	usermod --shell /bin/bash $Uid
	echo "System Settings" >>p1
	echo "Ensure login shell supports autologout/TMOUT function" >>p2
	echo "login shell for user $Uid does not support autologout/TMOUT function" >>p3
	echo "IZ.1.4.6.6">>p12
	echo "Modified" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
fi
}

#IZ.1.4.6.7
SHELLS=/etc/shells
OPTIONAL="/bin/false|/bin/ksh93|/usr/bin/ksh|/usr/bin/rksh|/usr/bin/ksh93"
printf "/bin/sh\n/bin/bash\n/sbin/nologin\n/usr/bin/sh\n/usr/bin/bash\n/usr/sbin/nologin\n/bin/tcsh\n/bin/csh\n/bin/ksh\n/bin/rksh\n" | sort -u >t1
sort -u "$SHELLS" | egrep -v "$OPTIONAL" >t2
sk=`diff t1 t2 | sed "s~<~/etc/shells is missing:~g;s~>~/etc/shells has this non-compliant entry:~g"`
if [ "$sk" == '' ] ; then

	echo "System Settings" >>p1
	echo "Restrict user selection to login shells which supports time out" >>p2
	echo "user selection to login shells supports time out" >>p3
	echo "IZ.1.4.6.7">>p12
	echo "yes" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
else

	echo "System Settings" >>p1
	echo "Restrict user selection to login shells which supports time out" >>p2
	echo "user selection to login shells does not support time out" >>p3
	echo "IZ.1.4.6.7">>p12
	echo "no" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
fi
rm -rf t1 t2


#IZ.1.2.2:file-check
if [ -f /var/log/wtmp ]
then
	echo "Logging" >>p1
	echo "/var/log/wtmp" >>p2
	echo "/var/log/wtmp_exist" >> p3
	echo "yes" >>p4
	echo "$c" >> p5
	echo "IZ.1.2.2" >>p12
	echo "$z" >>p6
else
	touch /var/log/wtmp ; chmod 664 /var/log/wtmp; chown root:utmp /var/log/wtmp
	echo "Logging" >>p1
	echo "/var/log/wtmp" >>p2
	echo "/var/log/wtmp_doesnt_exist" >> p3
	echo "Modified" >>p4
	echo "IZ.1.2.2" >>p12
	echo "$c" >> p5
	echo "$z" >>p6
fi

#IZ.1.2.3.1:file-check	
if [ -f /var/log/messages ]
then
	echo "Logging" >>p1
	echo "/var/log/messages" >>p2
	echo "/var/log/messsages_exist" >> p3
	echo "yes" >>p4
	echo "$c" >> p5
	echo "IZ.1.2.3.1" >>p12
	echo "$z" >>p6
else
	touch /var/log/messages ; chmod 644 /var/log/messages; chown root:root /var/log/messages
	echo "Logging" >>p1
	echo "IZ.1.2.3.1" >>p12
	echo "/var/log/messages" >>p2
	echo "/var/log/messages_doesnt_exist" >> p3
	echo "no" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
fi


#IZ.1.2.4.2
if [ $(grep -v '^\s*#' /etc/pam.d/system-auth | grep pam_tally2.so |wc -l) -gt 0 ] || [ $(grep -v '^\s*#' /etc/pam.d/password-auth | grep pam_tally2.so |wc -l) -gt 0 ]
then
	if [ -f /var/log/tallylog ]
	then
		echo "Logging" >>p1
		echo "/var/log/tallylog" >>p2
		echo "file-exists-/var/log/tallylog">>p3
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "IZ.1.2.4.2" >>p12
	else
		touch /var/log/tallylog; chmod 600 /var/log/tallylog; chown root:root /var/log/tallylog
		echo "Logging" >>p1
		echo "/var/log/tallylog-permissions" >>p2
		echo "missing-file-/var/log/tallylog">>p3
		echo "Modified" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "IZ.1.2.4.2" >>p12
	fi
else
		echo "Logging" >>p1
		echo "/var/log/tallylog-permissions" >>p2
		echo "pam_tally2.so is not in use in /etc/pam.d/password-auth or /etc/pam.d/system-auth">>p3
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "IZ.1.2.4.2" >>p12
fi


#IZ.1.2.5:file-check
if [ -f /var/log/secure ]
then
		echo "Logging" >>p1
		echo "/var/log/secure" >>p2
		echo "File /var/log/secure exist" >> p3
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo IZ.1.2.5 >>p12
else
		touch /var/log/secure ; chmod 600 /var/log/secure; chown root:root /var/log/secure
		echo "Logging" >>p1
		echo "/var/log/secure" >>p2
		echo "File /var/log/secure not exist" >> p3
		echo "Modified" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo IZ.1.2.5 >>p12
fi


#IZ.1.2.7.1:Logging
if [ "$(systemctl is-active chronyd)" == "active" ] && [ "$(systemctl is-enabled chronyd)" == "enabled" ]
then
	echo "Logging" >>p1
        echo "Synchronized system clocks, ensure it is active" >>p2
	echo "chronyd is active and running" >>p3
	echo "IZ.1.2.7.1">>p12
	echo "yes" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
else

if [ "$(systemctl is-active ntpd)" == "active" ] && [ "$(systemctl is-enabled ntpd)" == "enabled" ]
then
	echo "Logging" >>p1
        echo "Synchronized system clocks, ensure it is active" >>p2
	echo "ntpd is active and running" >>p3
	echo "IZ.1.2.7.1">>p12
	echo "yes" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
else
	yum install chrony -y
	systemctl enable chronyd
	systemctl start chronyd
	echo "Logging" >>p1
        echo "Synchronized system clocks, ensure it is active" >>p2
	echo "chronyd or ntpd is not active and running" >>p3
	echo "IZ.1.2.7.1">>p12
	echo "Modified" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
fi
fi


#IZ.1.2.7.2:Logging
if [ "$(systemctl is-active chronyd)" == "active" ]
then
	egrep "^(server|pool)" /etc/chrony.conf
	if [ $? -eq 0 ]
	then
		sp=`timedatectl |grep 'synchronized' |awk -F: '{print $2}' |sed -e 's/ //'`
		if [ "$sp" == "yes" ]
		then
			echo "Logging" >>p1
			echo "Synchronized system clocks - chronyd has a server" >>p2
			echo "chronyd-is-active and time-is-synchronised" >>p3
			echo "IZ.1.2.7.2" >>p12
			echo "yes" >>p4
			echo "$c" >> p5
			echo "$z" >>p6
		else
			echo "Logging" >>p1
			echo "Synchronized system clocks - chronyd has a server" >>p2
			echo "chronyd-is-active but time-is-not-synchronised" >>p3
			echo "IZ.1.2.7.2">>p12
			echo "no" >>p4
			echo "$c" >> p5
			echo "$z" >>p6
		fi
	else
			echo "Logging" >>p1
			echo "Synchronized system clocks - chronyd has a server" >>p2
			echo "chronyd-is-active but no time server or pool configured" >>p3
			echo "IZ.1.2.7.2">>p12
			echo "no" >>p4
			echo "$c" >> p5
			echo "$z" >>p6
	fi
else
		echo "Logging" >>p1
		echo "Synchronized system clocks - chronyd has a server" >>p2
		echo "chronyd-is-not-active" >>p3
		echo "IZ.1.2.7.2">>p12
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
fi


#IZ.1.2.7.3:Logging 
if [ "$(systemctl is-active chronyd)" == "active" ]
then
	if [ "$(grep ^OPTIONS /etc/sysconfig/chronyd |awk -F"=" '{print $2}' |awk '{print $2}' |sed -e 's/"//g')" == "chrony" ] ; then
		echo "Logging" >>p1
        echo "Synchronized system clocks - chronyd does not have excess privilege" >>p2
		echo "The task is running as chrony ID" >>p3
		echo "IZ.1.2.7.3">>p12
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
	else
		sed -i 's/OPTIONS=.*/OPTIONS="-u chrony"/g' /etc/sysconfig/chronyd
		echo "Logging" >>p1
        echo "Synchronized system clocks - chronyd does not have excess privilege" >>p2
		echo "The task is not running as chrony ID" >>p3
		echo "IZ.1.2.7.3">>p12
		echo "Modified" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
	fi
else
		systemctl start chronyd
		echo "Logging" >>p1
        echo "Synchronized system clocks - chronyd does not have excess privilege" >>p2
		echo "Chrony service is not active" >>p3
		echo "IZ.1.2.7.3">>p12
		echo "Modified" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
fi

#IZ.1.2.7.4:Logging 
if [ "$(systemctl is-active ntpd)" == "active" ]
then
	val1=`cat /etc/ntp.conf |grep 'restrict default kod nomodify notrap nopeer noquery' |wc -c`
	val2=`cat /etc/ntp.conf |grep 'restrict -6 default kod nomodify notrap nopeer noquery' |wc -c`
	if [ $val1 -gt 0 ] || [ $val2 -gt 0 ] ; then
		echo "Logging" >>p1
        echo "Synchronized system clocks - ntpd has secure defaults" >>p2
		echo "ntpd-is-active and key-defaults-for-both-ip4-and-ip6-is-set" >>p3
		echo "IZ.1.2.7.4">>p12
		echo "yes" >>p4
		
	else
		echo "Logging" >>p1
        echo "Synchronized system clocks - ntpd has secure defaults" >>p2
		echo "ntpd-is-active but key-defaults-for-both-ip4-and-ip6-is-not-set" >>p3
		echo "IZ.1.2.7.4">>p12
		echo "no" >>p4
		
	fi
else
		echo "Logging" >>p1
        echo "Synchronized system clocks - ntpd has secure defaults" >>p2
		echo "ntpd is not active" >>p3
		echo "IZ.1.2.7.4">>p12
		echo "yes" >>p4
		
fi

#IZ.1.2.7.5:Logging 
if [ "$(systemctl is-active ntpd)" == "active" ]
then
	egrep "^(server|pool)" /etc/ntp.conf
	if [ $? -eq 0 ]
	then
		sp=`/usr/bin/ntpstat`
		if [ $? -eq 0 ]
		then
			echo "Logging" >>p1
			echo "Synchronized system clocks - ntpd has a server" >>p2
			echo "ntpd-is-active, time server is configured and time-is-synchronised" >>p3
			echo "IZ.1.2.7.5">>p12
			echo "yes" >>p4
			echo "$c" >> p5
			echo "$z" >>p6
	    		
	    		
	    		
			echo "$timestamp" >>en4
		else
			echo "Logging" >>p1
			echo "Synchronized system clocks - ntpd has a server" >>p2
			echo "ntpd-is-active, time server is configured but time-is-not-synchronised" >>p3
			echo "IZ.1.2.7.5">>p12
			echo "no" >>p4
			echo "$c" >> p5
			echo "$z" >>p6
	    		
	    		
	    		
			echo "$timestamp" >>en4
		fi
	else
			echo "Logging" >>p1
			echo "Synchronized system clocks - ntpd has a server" >>p2
			echo "ntpd-is-active but time server is not configured" >>p3
			echo "IZ.1.2.7.5">>p12
			echo "no" >>p4
			echo "$c" >> p5
			echo "$z" >>p6
	    		
	    		
	    		
			echo "$timestamp" >>en4
	fi
else
		echo "Logging" >>p1
        	echo "Synchronized system clocks - ntpd has a server" >>p2
		echo "ntpd is not active" >>p3
		echo "IZ.1.2.7.5">>p12
		echo "yes" >>p4
		
fi

#IZ.1.2.7.6
if [ "$(systemctl is-active ntpd)" == "active" ]
then
	sm=`ps -ef |grep ntpd |grep -v "grep" |awk '{print $1}'`
	if [ "$sm" == "ntp" ]
	then
		echo "Logging" >>p1
                echo "Synchronized system clocks, ensure it is active" >>p2
		echo "ntpd is running with ntp ID" >>p3
		echo "IZ.1.2.7.6">>p12
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
	else
		echo "Logging" >>p1
                echo "Synchronized system clocks, ensure it is active" >>p2
		echo "ntpd is not running with ntp ID" >>p3
		echo "IZ.1.2.7.6">>p12
		echo "no" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
	fi
else
		echo "Logging" >>p1
                echo "Synchronized system clocks, ensure it is active" >>p2
		echo "ntpd is not active" >>p3
		echo "IZ.1.2.7.6">>p12
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
fi


#IZ.1.4.1
sk=`cat /etc/pam.d/other |grep ^auth |grep required |grep pam_deny.so |wc -l`
sl=`cat /etc/pam.d/other |grep ^account |grep required |grep pam_deny.so |wc -l`
if [ $sk -gt 0 ]
then
	echo "System Settings" >>p1
	echo "/etc/pam.d/other" >>p2
	echo "auth-required-has-pam_deny.so in file /etc/pam.d/other" >>p3
	echo "yes" >>p4
	echo "$c" >>p5
	echo "$z" >>p6
	echo "IZ.1.4.1" >>p12
else
	sed -i '/^#%PAM.*/a auth     required       pam_deny.so' /etc/pam.d/other
	#echo "auth     required       pam_deny.so" >>/etc/pam.d/other
	echo "System Settings" >>p1
	echo "/etc/pam.d/other" >>p2
	echo "auth-required-pam_deny.so entry added in file /etc/pam.d/other" >>p3
	echo "Modified" >>p4
	echo "$c" >>p5
	echo "$z" >>p6
	echo "IZ.1.4.1" >>p12
fi
if [ $sl -gt 0 ] 
then
	echo "System Settings" >>p1
	echo "/etc/pam.d/other" >>p2
	echo "account-required-has-pam_deny.so in file /etc/pam.d/other" >>p3
	echo "yes" >>p4
	echo "$c" >>p5
	echo "$z" >>p6
	echo "IZ.1.4.1" >>p12
else
	sed -i '/^auth.*/a account     required       pam_deny.so' /etc/pam.d/other
	#echo "account  required       pam_deny.so" >>/etc/pam.d/other
	echo "System Settings" >>p1
	echo "/etc/pam.d/other" >>p2
	echo "auth-required-has-pam_deny.so in file /etc/pam.d/other" >>p3
	echo "Modified" >>p4
	echo "$c" >>p5
	echo "$z" >>p6
	echo "IZ.1.4.1" >>p12
fi



#IZ.2.1.4.0
Release=`cat /etc/os-release |grep -w "VERSION="|awk -F"=" '{print $2}'|cut -c2-|awk -F"." '{print $1}'`
if [ "$Release" == "8" ]
then
	sk=`update-crypto-policies --show`
	if [ "$sk" == "LEGACY" ]
	then
		update-crypto-policies --set DEFAULT
		echo "Encryption" >>p1
		echo "System-wide Cryptographic policies" >>p2
		echo "cryptographic methods is set as \"$sk\" " >>p3
		echo "Modified. Server reboot is required after the change" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "IZ.2.1.4.0" >>p12
	else
		echo "Encryption" >>p1
		echo "Crypto Policies" >>p2
		echo "cryptographic methods is set as valid" >>p3
		echo "Yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "IZ.2.1.4.0" >>p12
	fi
else
		echo "Encryption" >>p1
		echo "Crypto Policies" >>p2
		echo "Not applicable as the OS is not RHEL-8" >>p3
		echo "Yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "IZ.2.1.4.0" >>p12
fi




#IZ.C.4.1.3 
Release=`cat /etc/os-release |grep -w "VERSION="|awk -F"=" '{print $2}'|cut -c2-|awk -F"." '{print $1}'`
if [ "$Release" == "8" ]
then
grep -E 'kernelopts=(\S+\s+)*audit=1\b' /boot/grub2/grubenv
	if [ $? -eq 0 ] ; 	then
		echo "Configure System Accounting" >>p1
		echo "Ensure auditing for processes that start prior to auditd is enabled" >>p2
		echo "auditing for processes that start prior to auditd is enabled in /etc/default/grub" >>p3
		echo "IZ.C.4.1.3">>p12
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "$timestamp" >>en4
	else
		sed -i 's/GRUB_CMDLINE_LINUX="[^"]*/& audit=1/' /etc/default/grub
		grub2-mkconfig -o /boot/grub2/grub.cfg
		echo "Configure System Accounting" >>p1
		echo "Ensure auditing for processes that start prior to auditd is enabled" >>p2
		echo "auditing for processes that start prior to auditd is not enabled in /etc/default/grub" >>p3
		echo "IZ.C.4.1.3">>p12
		echo "Modified" >>p4
		echo "$c" >> p5
		echo "$z" >>p6 	
		echo "$timestamp" >>en4
	fi
else
if [ "$Release" == "7" ]
then
	grep "^\s*linux" /boot/grub2/grub.cfg |grep "audit=1"
	if [ $? -eq 0 ] ; 	then
		echo "Configure System Accounting" >>p1
		echo "Ensure auditing for processes that start prior to auditd is enabled" >>p2
		echo "auditing for processes that start prior to auditd is enabled in /boot/grub2/grub.cfg" >>p3
		echo "IZ.C.4.1.3">>p12
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "$timestamp" >>en4
	else
		echo "Configure System Accounting" >>p1
		echo "Ensure auditing for processes that start prior to auditd is enabled" >>p2
		echo "This is RHEL7. Please add audit=1 in file /boot/grub2/grub.cfg" >>p3
		echo "IZ.C.4.1.3">>p12
		echo "Manual_Check" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "$timestamp" >>en4
	fi
fi
fi

#IZ.C.6.2.6
msg=''
if [ "`echo $PATH | grep :: `" != "" ]; then 
  msg="Empty Directory in PATH (::)" 
fi 
if [ "`echo $PATH | grep :$`" != "" ]; then 
  msg="Trailing : in PATH" 
fi 
p=`echo $PATH | tr ":" "\n" |grep -v "/root/bin"` 
set -- $p 
while [ "$1" != "" ]; do
  if [ "$1" = "." ]; then
    msg="PATH contains ." 
    shift 
    continue 
  fi 
  if [ -d $1 ] ; then
    dirperm=`ls -ldH $1 | cut -f1 -d" "` 
    if [ `echo $dirperm | cut -c6 ` != "-" ]; then
      msg="Group Write permission set on directory $1" 
    fi 
	  if [ `echo $dirperm | cut -c9 ` != "-" ]; then
	    msg="Other Write permission set on directory $1" 
	  fi 
		  dirown=`ls -ldH $1 | awk '{print $3}'` 
		  if [ "$dirown" != "root" ] ; then
		    msg="$1 is not owned by root "
		  fi 
  else 
    msg="$1 is not a directory"
  fi 
  shift 
done
if [ "$msg" == "" ] ; then
	echo "User and Group Settings" >>p1
	echo "Ensure root PATH Integrity in the default root environment" >>p2
	echo "root PATH Integrity in the default root environment " >>p3
	echo "IZ.C.6.2.6">>p12
	echo "yes" >>p4
			echo "$c" >> p5
			echo "$z" >>p6
    		
    		
    		
			echo "$timestamp" >>en4
else
	echo "User and Group Settings" >>p1
	echo "Ensure root PATH Integrity in the default root environment " >>p2
	echo "$msg - check the PATH variable if all directory exists in server" >>p3
	echo "IZ.C.6.2.6">>p12
	echo "no" >>p4
			echo "$c" >> p5
			echo "$z" >>p6
    		
    		
    		
			echo "$timestamp" >>en4
fi

#IZ.C.6.2.11
for dir in `cat /etc/passwd | egrep -v '^(root|halt|sync|shutdown)' |grep -v "/sbin/nologin" | awk -F: '{ print $6 }'`; do
        if [ ! -h "$dir/.forward" -a -f "$dir/.forward" ]; then
        rm -rf $dir/.forward
        echo "User and Group Settings" >>p1
        echo "Ensure no users have .forward files in directories located in local file systems." >>p2
        echo ".forward file exists in user home directory $dir" >>p3
        echo "IZ.C.6.2.11">>p12
        echo "Modified" >>p4
        echo "$c" >> p5
        echo "$z" >>p6
else
        echo "User and Group Settings" >>p1
        echo "Ensure no users have .forward files in directories located in local file systems." >>p2
        echo ".forward file not exists for user home directory $dir" >>p3
        echo "IZ.C.6.2.11">>p12
        echo "yes" >>p4
        echo "$c" >> p5
        echo "$z" >>p6
fi
done

#IZ.C.6.2.12;IZ.C.6.2.13
for dir in `cat /etc/passwd | egrep -v '^(root|halt|sync|shutdown)' |grep -v "/sbin/nologin" | awk -F: '{ print $6 }'`; do
if [ ! -h "$dir/.netrc" -a -f "$dir/.netrc" ]; then
	chmod 600 $dir/.netrc
	echo "User and Group Settings" >>p1
	echo "Ensure no users have .netrc files in directories located in local file systems." >>p2
	echo ".netrc file exists in user home directory $dir" >>p3
	echo "IZ.C.6.2.12;IZ.C.6.2.13">>p12
	echo "Modified" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
else
	echo "User and Group Settings" >>p1
	echo "Ensure no users have .netrc files in directories located in local file systems." >>p2
	echo ".netrc file not exists in user home directory $dir" >>p3
	echo "IZ.C.6.2.12;IZ.C.6.2.13">>p12
	echo "yes" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
fi
done


#IZ.C.6.2.14
for dir in `cat /etc/passwd | egrep -v '(root|halt|sync|shutdown)' | awk -F: '($7 != "/usr/sbin/nologin") { print $6 }'`; do
if [ ! -h "$dir/.rhosts" -a -f "$dir/.rhosts" ]; then
	rm -rf $dir/.rhosts
	echo "User and Group Settings" >>p1
	echo "Ensure no users have .rhosts files in directories located in local file systems." >>p2
	echo ".rhosts removed from user home directory $dir" >>p3
	echo "IZ.C.6.2.14">>p12
	echo "Modified" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
else
	echo "User and Group Settings" >>p1
	echo "Ensure no users have .rhosts files in directories located in local file systems." >>p2
	echo ".rhosts file not exists in user home directory $dir" >>p3
	echo "IZ.C.6.2.14">>p12
	echo "yes" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
fi
done

#IZ.C.6.2.18
cat /etc/passwd | awk -F":" '{print $1}'| sort  | uniq -cd | awk '{print $2}'> temp_uid
sp=`cat temp_uid | wc -c`
if [ "$sp" == 0 ]
then
	echo "User and Group Settings" >>p1
	echo "Ensure no duplicate user names exist" >>p2
	echo "no duplicate user names exist" >>p3
	echo "IZ.C.6.2.18">>p12
	echo "yes" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
else
	for i in `cat temp_uid`
	do
	echo "User and Group Settings" >>p1
	echo "Ensure no duplicate user names exist" >>p2
	echo "Duplicate user name exists for user $i" >>p3
	echo "IZ.C.6.2.18">>p12
	echo "Manual_Check_Required" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
fi

#IZ.C.6.2.19
msg=''
cat /etc/group | cut -f1 -d":" | sort -n | uniq -c | while read x ; do
  [ -z "${x}" ] && break 
  set - $x 
  if [ $1 -gt 1 ]; then
    gids=`gawk -F: '($1 == n) { print $3 }' n=$2 /etc/group | xargs` 
    msg="Duplicate Group Name ($2): ${gids}" 
  fi 
done
if [ "$msg" == "" ] ; then

	echo "User and Group Settings" >>p1
	echo "Ensure no duplicate group names exist" >>p2
	echo "no duplicate group names exist" >>p3
	echo "IZ.C.6.2.19">>p12
	echo "yes" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
else

	echo "User and Group Settings" >>p1
	echo "Ensure no duplicate group names exist" >>p2
	echo "$msg" >>p3
	echo "IZ.C.6.2.19">>p12
	echo "no" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
fi





#AV.2.0.1.1
sk=`cat /etc/ssh/sshd_config | grep -i "^PrintMotd" |uniq |wc -l`
if [ $sk -gt 0 ]
then
	szk=`cat /etc/ssh/sshd_config | grep "^PrintMotd" | awk '{print $2}' |uniq`
	if [ "$szk" == "$PRINTMOTD" ]
	then
		echo "Business Use Notice " >>p1
		echo "PrintMotd" >>p2
		echo "PrintMotd is set as \"$szk\" in /etc/ssh/sshd_config" >> p3
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "AV.2.0.1.1" >>p12

	else
		echo "Business Use Notice " >>p1
		echo "PrintMotd" >>p2
		echo "Value-is-not-set in /etc/ssh/sshd_config" >> p3
		echo "no" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "AV.2.0.1.1" >>p12

		
	fi
else
	szk=`cat /etc/ssh/sshd_config | grep "^#PrintMotd" | awk '{print $2}' |uniq`
	if [ "$szk" == "$PRINTMOTD" ]
	then
		echo "Business Use Notice " >>p1
		echo "PrintMotd" >>p2
		echo "PrintMotd is set as \"$szk\" in /etc/ssh/sshd_config" >> p3
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "AV.2.0.1.1" >>p12

		
	else
		echo "Business Use Notice " >>p1
		echo "PrintMotd" >>p2
		echo "Value-is-not-set in /etc/ssh/sshd_config" >> p3
		echo "no" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "AV.2.0.1.1" >>p12


	fi
fi

#AV.1.7.2
cat /etc/passwd | egrep -v "/sbin/nologin|sync|shutdown|halt|/bin/false"|awk -F":" '{print $6}'>temp_home
for i in `cat temp_home`
do
if [ -f $i/.ssh/id_rsa ] || [ -f $i/.ssh/authorized_keys ] || [ -f $i/.ssh/authorized_keys2 ] || [ -f $i/.ssh/id_ecdsa ]
then
	ss1=`ssh-keygen -l -f $i/.ssh/id_rsa |awk '{print $1}'`
	ss2=`ssh-keygen -l -f $i/.ssh/authorized_keys |awk '{print $1}'`
	ss3=`ssh-keygen -l -f $i/.ssh/authorized_keys2 |awk '{print $1}'`
	ss4=`ssh-keygen -l -f $i/.ssh/id_ecdsa |awk '{print $1}'`
	if [ $ss1 -ge 2048 ] || [ $ss2 -ge 2048 ] || [ $ss3 -ge 2048 ] || [ $ss4 -ge 256 ]
	then
		echo "Identify and Authenticate Users" >>p1
		echo "Public Key Authentication: Key Strength and Algorithm" >>p2
		echo "Public key strength is valid in $i/.ssh as per techspec guidelines" >>p3
		echo "yes" >> p4
		echo "AV.1.7.2" >>p12
		echo "$c" >> p5
		echo "$z" >>p6	
	else
		echo "Identify and Authenticate Users" >>p1
		echo "Public Key Authentication: Key Strength and Algorithm" >>p2
		echo "Public key strength is invalid in $i/.ssh as per techspec guidelines" >>p3
		echo "no" >> p4
		echo "AV.1.7.2" >>p12
		echo "$c" >> p5
		echo "$z" >>p6
	fi
else

		echo "Identify and Authenticate Users" >>p1
		echo "Public Key Authentication: Key Strength and Algorithm" >>p2
		echo "Public key not exists in user home dir $i/.ssh/" >>p3
		echo "yes" >> p4
		echo "AV.1.7.2" >>p12
		echo "$c" >> p5
		echo "$z" >>p6
fi
done
rm -rf temp_home




#AV.2.1.1.2,AV.2.1.1.3,AV.2.1.1.4
ss=`cat /etc/ssh/sshd_config | grep ^Ciphers |wc -c`
if [ $ss -ne 0 ]
then
	sl=`cat /etc/ssh/sshd_config | grep ^Ciphers | egrep -i 'des|64' |wc -c`
	if [ $sl -ne 0 ]
	then
		echo "Encryption" >>p1
		echo "Ciphers-value-in-file-/etc/ssh/sshd_config" >>p2
		echo "des-and-64-bit-algorithm-exist-in-ciphers" >>p3
		echo "no" >> p4
		echo "AV.2.1.1.2,AV.2.1.1.3,AV.2.1.1.4" >>p12
		echo "$c" >> p5
		echo "$z" >>p6	
	else
		echo "Encryption" >>p1
		echo "Ciphers-value-in-file-/etc/ssh/sshd_config" >>p2
		echo "des-and-64-bit-algorithm-not-exist-in-ciphers" >>p3
		echo "yes" >> p4
		echo "AV.2.1.1.2,AV.2.1.1.3,AV.2.1.1.4" >>p12
		echo "$c" >> p5
		echo "$z" >>p6
	fi
else

		echo "Encryption" >>p1
		echo "Ciphers-value-in-file-/etc/ssh/sshd_config" >>p2
		echo "Ciphers-entry-doesnot-exist-in-/etc/ssh/sshd_config" >>p3
		echo "no" >> p4
		echo "AV.2.1.1.2,AV.2.1.1.3,AV.2.1.1.4" >>p12
		echo "$c" >> p5
		echo "$z" >>p6
fi

#IZ.2.1.3.0
grep ^password /etc/pam.d/* | egrep 'required|sufficient' | grep  pam_unix.so |awk -F: '{print $1}' > temp_pam.so
for i in `cat temp_pam.so`
do
sk=`cat $i |egrep 'sha512'  |wc -l`
	if [ $sk -gt 0 ]
	then
		echo "Encryption" >>p1
		echo "Password-EncryptionRequired" >>p2
		echo "sha512-is-set-in-file-$i" >>p3
		echo "yes" >>p4
		echo "IZ.2.1.3.0" >>p12
		echo "$c" >>p5
		echo "$z" >>p6
	else
		sed -i "s/password.*pam_unix.so/& sha512/g" $i
		echo "Encryption" >>p1
		echo "Password-EncryptionRequired" >>p2
		echo "sha512-is-not-set-in-file-$i" >>p3
		echo "Modified" >>p4
		echo "IZ.2.1.3.0" >>p12
		echo "$c" >>p5
		echo "$z" >>p6
	fi
done

grep ^password /etc/pam.d/* | egrep 'required|sufficient' | grep  pam_unix.so |awk -F: '{print $1}' > temp_pam.so
for i in `cat temp_pam.so`
do
sk=`cat $i |egrep 'shadow'  |wc -l`
	if [ $sk -gt 0 ]
	then
		echo "Encryption" >>p1
		echo "Password-EncryptionRequired" >>p2
		echo "shadow-is-set-in-file-$i" >>p3
		echo "yes" >>p4
		echo "IZ.2.1.3.0" >>p12
		echo "$c" >>p5
		echo "$z" >>p6
	else
		sed -i "s/password.*pam_unix.so/& shadow/g" $i
		echo "Encryption" >>p1
		echo "Password-EncryptionRequired" >>p2
		echo "shadow-is-not-set-in-file-$i" >>p3
		echo "Modified" >>p4
		echo "IZ.2.1.3.0" >>p12
		echo "$c" >>p5
		echo "$z" >>p6
	fi
done
rm -rf temp_pam.so






#IZ.1.1.4.6:loginretries value in password-auth and system-auth
if [ -f /etc/pam.d/system-auth ] 
then
sk=`cat /etc/pam.d/system-auth | grep "pam_deny.so" | grep "auth" |awk '{print $2}'`

	if [ $sk == required ]
	then
		echo "auth _requirement" >>p1
		echo "loginretries" >>p2
		echo "Consecutive failed login attempts is set in /etc/pam.d/system-auth" >>p3
		echo "IZ.1.1.4.6" >>p12
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
	else
		echo "auth _requirement" >>p1
		echo "loginretries" >>p2
		echo "Consecutive failed login attempts is not set in /etc/pam.d/system-auth" >>p3
		echo "IZ.1.1.4.6" >>p12
		echo "no" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
	fi
else
		echo "auth _requirement" >>p1
		echo "loginretries" >>p2
		echo "File not found /etc/pam.d/system-auth" >>p3
		echo "IZ.1.1.4.6" >>p12
		echo "no" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
fi

if [ -f /etc/pam.d/password-auth ] 
then
sk=`cat /etc/pam.d/system-auth | grep "pam_deny.so" | grep "password" |awk '{print $2}'`

	if [ $sk == required ]
	then
		echo "Password_requirement" >>p1
		echo "loginretries" >>p2
		echo "Consecutive failed login attempts is set in /etc/pam.d/password-auth" >>p3
		echo "IZ.1.1.4.6" >>p12
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
	else
		echo "Password_requirement" >>p1
		echo "loginretries" >>p2
		echo "Consecutive failed login attempts is not set in /etc/pam.d/password-auth" >>p3
		echo "IZ.1.1.4.6" >>p12
		echo "no" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
	fi
else
		echo "Password_requirement" >>p1
		echo "loginretries" >>p2
		echo "File not found /etc/pam.d/system-auth" >>p3
		echo "IZ.1.1.4.6" >>p12
		echo "no" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
fi




#IZ.1.2.1.4.1
rsyslogStatus=`systemctl is-enabled rsyslog`
if [ "$rsyslogStatus" == "enabled" ] ; then
	echo "Logging" >>p1
	echo "Login success or failure, logging enabled." >>p2
	echo "rsyslog is enabled." >>p3
	echo "IZ.1.2.1.4.1">>p12
	echo "yes" >>p4
else
	systemctl enable rsyslog
	echo "Logging" >>p1
	echo "Login success or failure, logging enabled." >>p2
	echo "rsyslog is not enabled." >>p3
	echo "IZ.1.2.1.4.1">>p12
	echo "Modified" >>p4
fi

#IZ.1.2.1.4.2
Release=`cat /etc/redhat-release |awk '{print $1}'`
if [ "$Release" == "Red" ] ; then
	sk1=`cat /etc/rsyslog.conf | grep "^authpriv.\*" | grep "/var/log/secure" |wc -c`
	sk2=`cat /etc/rsyslog.conf | grep "^*.info;mail.none;authpriv.none;cron.none" |grep /var/log/messages |wc -c`
	if [ "$sk1" -gt "0" ] || [ "$sk2" -gt "0" ] ; then
		skl=`cat /etc/rsyslog.conf | grep "authpriv.\*" | grep "/var/log/secure"`
		if [ $? -eq 0 ] ; then
			echo "Logging" >>p1
			echo "Login success or failure" >>p2
			echo "/etc/rsyslog.conf entry exist for '$skl'" >>p3
			echo "yes" >>p4
			echo "IZ.1.2.1.4.2" >>p12
		
		else
			
			echo "Logging" >>p1
			echo "Login success or failure" >>p2
			echo "/etc/rsyslog.conf entry missing for '$skl'" >>p3
			echo "no" >>p4
			echo "IZ.1.2.1.4.2" >>p12
		
		fi
		skz=`cat /etc/rsyslog.conf | grep "*.info;mail.none;authpriv.none;cron.none" |grep /var/log/messages`
		if [ $? -eq 0 ] ; then
			echo "Logging" >>p1
			echo "Login success or failure" >>p2
			echo "/etc/rsyslog.conf entry exist for '$skz'" >>p3
			echo "yes" >>p4
			echo "IZ.1.2.1.4.2" >>p12
		
		else
			echo "Logging" >>p1
			echo "Login success or failure" >>p2
			echo "/etc/rsyslog.conf entry not exist for '$skz'" >>p3
			echo "no" >>p4
			echo "IZ.1.2.1.4.2" >>p12
		
		fi
	else
		echo "Logging" >>p1
		echo "Login success or failure" >>p2
		echo "/etc/rsyslog.conf entry not exist for '$skl' and '$$kz'" >>p3
		echo "no" >>p4
		echo "IZ.1.2.1.4.2" >>p12
		                			
	fi	
else
	echo "Logging" >>p1
	echo "Login success or failure" >>p2
	echo "Not for Redhat Linux" >>p3
	echo "Not_Applicable" >>p4
	echo "IZ.1.2.1.4.2" >>p12
					    	
fi


#IZ.1.4.3.1.1
sk=`rpm -q libselinux | awk -F'-' '{print $1}' |uniq`
if [ "$sk" == "libselinux" ]
then
	echo "System-Settings" >>p1
	echo "Ensure SELinux is installed" >>p2
	echo "libselinux package in installed" >>p3	
	echo "yes" >>p4
	echo "$c" >>p5
	echo "$z" >>p6
	echo "IZ.1.4.3.1.1" >>p12
else
	yum install libselinux -y
	echo "System-Settings" >>p1
	echo "Ensure Selinux is installed" >>p2
	echo "libselinux package in not installed" >>p3
	echo "Modified" >>p4
	echo "$c" >>p5
	echo "$z" >>p6
	echo "IZ.1.4.3.1.1" >>p12	
fi



#IZ.1.4.3.1.2:IZ.1.4.3.1.3
sk=`cat /etc/selinux/config |grep ^SELINUX= |awk -F= '{print $2}'`
if [ "$sk" == "enforcing" ] || [ "$sk" == "permissive" ]
then
	echo "System-Settings" >>p1
	echo "Ensure the SELinux state is enforcing or permissive" >>p2
	echo "$sk-set-in-file-/etc/selinux/config" >>p3	
	echo "yes" >>p4
	echo "$c" >>p5
	echo "$z" >>p6
	echo "IZ.1.4.3.1.2:IZ.1.4.3.1.3" >>p12
else
	setenforce permissive
	sed -i 's/^SELINUX=.*/SELINUX=permissive/g' /etc/selinux/config
	echo "System-Settings" >>p1
	echo "Ensure the SELinux state is enforcing or permissive" >>p2
	echo "Selinux set as Permissive in /etc/selinux/config" >>p3
	echo "Modified" >>p4
	echo "$c" >>p5
	echo "$z" >>p6
	echo "IZ.1.4.3.1.2:IZ.1.4.3.1.3" >>p12	
fi



#IZ.1.4.3.1.4
st=$(sestatus |grep "Loaded policy name:" | awk '{ print $4 }')
if [ "$st" == "targeted" ]
then
	echo "System-Settings" >>p1
	echo "SeLinux Loaded policy" >>p2
	echo "Policy is set to Targeted" >>p3	
	echo "yes" >>p4
	echo "$c" >>p5
	echo "$z" >>p6
	echo "IZ.1.4.3.1.4" >>p12
else
	sed -i 's/^SELINUXTYPE=.*/SELINUXTYPE=targeted/g' /etc/selinux/config
	echo "System-Settings" >>p1
	echo "SeLinux Loaded policy" >>p2
	echo "Policy is not set to Targeted" >>p3
	echo "Modified" >>p4
	echo "$c" >>p5
	echo "$z" >>p6
	echo "IZ.1.4.3.1.4" >>p12	
fi


#IZ.1.4.2.1

if [ "$(rpm -q vsftpd)" != "package vsftpd is not installed" ]
then
      if [ -f /etc/vsftpd/ftpusers ]
      then
			cc=`cat /etc/vsftpd/ftpusers |grep -i ^root |wc -c`
			if [ $cc -gt 0 ]
			then
					echo "System Settings">> p1
					echo "root id exist in /etc/vsftp/ftpusers"  >>p2
					echo "root_id_exist /etc/vsftp/ftpusers" >>p3
					echo "yes" >>p4
					echo "$c">>p5
					echo "$z" >>p6
					echo "IZ.1.4.2.1" >>p12
			else
					echo root >> /etc/vsftpd/ftpusers
					echo "System Settings">> p1
					echo "root id in /etc/vsftp/ftpusers">>p2
					echo "root_id_not_exist" >>p3
					echo "Modified" >>p4
					echo "IZ.1.4.2.1" >>p12
					echo "$c">>p5
					echo "$z" >>p6
			fi
		else
			echo "System Settings" >> p1
			echo "root-user-in-/etc/ftpusers-or-/etc/vsftpd.ftpusers-or-/etc/vsftp/ftpusers" >>p2
			echo "/etc/vsftpd/ftpusers file not exist " >>p3
			echo "yes">>p4
			echo "$c" >>p5
			echo "$z">>p6
			echo "IZ.1.4.2.1" >>p12
fi
else
        echo "System Settings">> p1
        echo "root-user-in-/etc/ftpusers-or-/etc/vsftpd.ftpusers-or-/etc/vsftp/ftpusers">> p2
        echo "vsftpd package is not installed on the server" >>p3
        echo "yes" >>p4
        echo "$c" >>p5
        echo "$z" >>p6
        echo "IZ.1.4.2.1" >>p12
fi


#IZ.2.0.1.0 
if [ -f /etc/motd ] || [ -f /etc/issue ]
then
	str=`cat /etc/motd |wc -c`
	if [ "$str" -gt "0" ]
	then
		echo "Business Use Notice" >>p1
		echo "Business Use Notice exists" >>p2
		echo "Business use notice mentioned in /etc/motd" >> p3
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "IZ.2.0.1.0" >>p12
	else 
		echo "Business Use Notice" >>p1
		echo "Business Use Notice exists" >>p2
		echo "Business use notice not mentioned in /etc/motd" >> p3
		echo "no" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "IZ.2.0.1.0" >>p12
	fi
else
		echo "Business Use Notice" >>p1
		echo "Business_use_notice_entry_not_exist_in_file_/etc/motd" >>p2
		echo "/etc/motd_or_/etc/issue_file_not_exist" >> p3
		echo "no" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "IZ.2.0.1.0" >>p12
fi








#IZ.1.4.2.2:Root
sk=`cat /etc/passwd |grep ^root| awk -F":" '{print $4}'`

	if [ "$sk" == "0" ]
	then
		echo "System Settings" >>p1
		echo "Ensure default group for the root account is GID 0" >>p2
		echo "Root GID is set to $sk" >> p3
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "IZ.1.4.2.2" >>p12
	else	
		usermod -g 0 root
		echo "System Settings" >>p1
		echo "Ensure default group for the root account is GID 0" >>p2
		echo "Root GID is not set to 0. It is Set as $sk" >> p3
		echo "Modified" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "IZ.1.4.2.2" >>p12
	fi



####################### Updates ##################################################





#IZ.2.0.1.1 
rpm -qa | grep '^gdm-'
if [ $? -eq 0 ] ; then
	if [ -f /etc/dconf/profile/gdm ] ; then
	sk=`egrep '^user-db:|^system-db:|^file-db:' /etc/dconf/profile/gdm|wc -l`
		if [ $sk -gt 0 ] ; then 
		ss=`egrep '^\[org/gnome/login-screen\]|^banner-message-enable|^banner-message-text' /etc/dconf/db/gdm.d/* 2>/dev/null | LC_ALL=C sort -V|wc -l`
			if [ $ss -gt 0 ] ; then
				echo "Business Use Notice" >>p1
				echo "Business Use Notice exists in Gnome" >>p2
				echo "GDM package is installed.The GNOME setting is correct" >> p3
				echo "yes" >>p4
				echo "IZ.2.0.1.1" >>p12
			else 
				echo "Business Use Notice" >>p1
				echo "Business Use Notice exists in Gnome" >>p2
				echo "GDM package is installed.But The GNOME setting is incorrect" >> p3
				echo "no" >>p4
				echo "$c" >> p5
				echo "$z" >>p6
				echo "IZ.2.0.1.1" >>p12
			fi
		else
			echo "Business Use Notice" >>p1
			echo "Business Use Notice exists in Gnome" >>p2
			echo "user-db:|system-db:|file-db: are not configured" >> p3
			echo "no" >>p4
			echo "$c" >> p5
			echo "$z" >>p6
			echo "IZ.2.0.1.1" >>p12
		fi
	else 
		echo "Business Use Notice" >>p1
		echo "Business Use Notice exists in Gnome" >>p2
		echo "/etc/dconf/profile/gdm this file does not exist" >> p3
		echo "no" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "IZ.2.0.1.1" >>p12
	fi
else
		echo "Business Use Notice" >>p1
		echo "Business Use Notice exists in Gnome" >>p2
		echo "The gdm package not installed" >> p3
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "IZ.2.0.1.1" >>p12
fi

#IZ.2.1.2
if [ "$(rpm -q coreutils)" == "package coreutils is not installed" ] || [ "$(rpm -q openssl)" == "package coreutils is not installed" ]
then
	yum install coreutils -y
	yum install openssl -y
	echo "Encryption" >>p1
	echo "File/Database Storage / Checksum" >>p2
	echo "Either coreutils or openssl package not installed" >>p3
	echo "no" >> p4
	echo "IZ.2.1.2" >>p12
	echo "$c" >> p5
	echo "$z" >>p6	
else
	echo "Encryption" >>p1
	echo "File/Database Storage / Checksum" >>p2
	echo "Either coreutils or openssl package installed" >>p3
	echo "yes" >> p4
	echo "IZ.2.1.2" >>p12
	echo "$c" >> p5
	echo "$z" >>p6
fi




#IZ.1.4.3.3.1:Audit Daemon
systemctl is-enabled auditd
if [ $? -eq 0 ]
then
		echo "System Settings" >>p1
		echo "Audit Daemon" >>p2
		echo "IZ.1.4.3.3.1" >>p12
		echo "Audit Daemon is enabled"  >> p3
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
else
		systemctl enable auditd
		echo "System Settings" >>p1
		echo "Audit Daemon" >>p2
		echo "IZ.1.4.3.3.1" >>p12
		echo "Audit Daemon is disabled" >> p3
		echo "Modified" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
fi

#IZ.1.2.1.4.3
sk=`grep '^[^#]*\$umask' /etc/rsyslog.conf /etc/rsyslog.d/*.conf | LC_ALL=C sort -V |wc -l`
if [ $sk -eq 0 ] ; then
	echo "Logging" >>p1
        echo "Login success or failure, logs created secure by default" >>p2
        echo "Permission is correctly set for files to be created by rsyslog " >> p3
        echo "IZ.1.2.1.4.3">>p12
	echo "yes" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
else
sl1=$(cat /etc/rsyslog.conf |grep '$umask'|awk '{print $2}')
sl2=$(grep -A1 '^[^#]*\$umask' /etc/rsyslog.conf |tail -1 |grep '$FileCreateMode'|awk '{print $2}')
if [ "$sl1" == "0077" ] && [ "$sl2" == "0600" ]
then
	echo "Logging" >>p1
        echo "Login success or failure, logs created secure by default" >>p2
        echo "umask value is set as 0077 and FileCreateMode value is set as 0600 in /etc/rsyslog.conf" >> p3
        echo "IZ.1.2.1.4.3">>p12
	echo "yes" >>p4
	echo "$c" >> p5
	echo "$z" >>p6     
else
	echo "Logging" >>p1
        echo "Login success or failure, logs created secure by default" >>p2
        echo "umask value and FileCreateMode value is not set correct in /etc/rsyslog.conf.Check Techspec" >> p3        
	echo "IZ.1.2.1.4.3">>p12
	echo "no" >>p4
	echo "$c" >> p5
	echo "$z" >>p6
       
fi
fi





#################################################################################################

######### SSH HC Script ####################

#################################################################################################
#AV.1.7.6
sk=`sshd -T |grep -i HostbasedAuthentication |awk '{print $2}'`
if [ "$sk" == "no" ]
then
	echo "Identify and Authenticate Users" >>p1
	echo "HostbasedAuthentication" >>p2
	echo "HostbasedAuthentication is set as \"$sk\" in /etc/ssh/sshd_config" >>p3
	echo "yes" >>p4
	echo "$c" >>p5
	echo "$z" >>p6
	echo "AV.1.7.6" >>p12
else
	echo "Identify and Authenticate Users" >>p1
	echo "HostbasedAuthentication" >>p2
	echo "HostbasedAuthentication is set as \"$sk\" in /etc/ssh/sshd_config" >>p3
	echo "no" >>p4
	echo "$c" >>p5
	echo "$z" >>p6
	echo "AV.1.7.6" >>p12
fi

#AV.1.2.1.2.1
sk=`sshd -T |grep -i ^LogLevel |awk '{print $2}'`
if [ "$sk" == "INFO" ]
then
	echo "Logging" >>p1
	echo "Ensure SSH LogLevel is set to INFO" >>p2
	echo "LogLevel is set as \"$sk\" in /etc/ssh/sshd_config" >>p3
	echo "yes" >>p4
	echo "$c" >>p5
	echo "$z" >>p6
	echo "AV.1.2.1.2.1" >>p12
else
	echo "Logging" >>p1
	echo "Ensure SSH LogLevel is set to INFO" >>p2
	echo "LogLevel is set as \"$sk\" in /etc/ssh/sshd_config" >>p3
	echo "no" >>p4
	echo "$c" >>p5
	echo "$z" >>p6
	echo "AV.1.2.1.2.1" >>p12
fi


#AV.1.7.2.1
cat /etc/passwd | egrep -v "/sbin/nologin|sync|shutdown|halt|/bin/false"|awk -F":" '{print $6}' >temp_home
for i in `cat temp_home` ; do
	if [ -f $i/.ssh/authorized_keys ]
	then
		sk=`grep '!!' $i/.ssh/authorized_keys |wc -l`
		if [ $sk -gt 0 ] ; then
			echo "Identify and Authenticate Users" >>p1
			echo "Public Key Authentication Key Label for Private Key Ownership Identification" >>p2
			echo "Public Key Authentication Key Label exists in $i/.ssh/authorized_keys" >> p3
			echo "Yes" >>p4
			echo "AV.1.7.2.1" >>p12
			echo "$c" >> p5
			echo "$z" >>p6
		else
			echo "Identify and Authenticate Users" >>p1
			echo "Public Key Authentication Key Label for Private Key Ownership Identification" >>p2
			echo "Public Key Authentication Key Label not exists in $i/.ssh/authorized_keys" >> p3
			echo "No" >>p4
			echo "AV.1.7.2.1" >>p12
			echo "$c" >> p5
			echo "$z" >>p6
		fi
	else
			echo "Identify and Authenticate Users" >>p1
			echo "Public Key Authentication Key Label for Private Key Ownership Identification" >>p2
			echo "authorized_keys file not exist in user home directory $i/.ssh/authorized_keys" >> p3
			echo "Yes" >>p4
			echo "AV.1.7.2.1" >>p12
			echo "$c" >> p5
			echo "$z" >>p6
	fi
done

#AV.1.2.1.3
sk=`sshd -T |grep -i ^LogLevel |awk '{print $2}'`
if [ "$sk" == "INFO" ] || [ "$sk" == "DEBUG" ] || [ "$sk" == "VERBOSE" ]
then
	echo "Logging" >>p1
       	echo "LogLevel" >>p2
	echo "LogLevel-set-as \"$sk\" in /etc/ssh/sshd_config" >> p3
	echo "yes" >>p4
       	echo "$c" >> p5
        echo "$z" >>p6
	echo "AV.1.2.1.3" >>p12
else
	echo "Logging" >>p1
       	echo "LogLevel" >>p2
	echo "LogLevel-should-be-set-as-DEBUG" >> p3
        echo "no" >>p4
        echo "$c" >> p5
        echo "$z" >>p6
	echo "AV.1.2.1.3" >>p12
fi

#AV.1.4.1
sz=`rpm -qa |grep -i ssh |grep -i openssh-[0-9].[0-9] | cut -c1,2,3,4,5,6,7,8,9,10,11`
szk=`echo $sz | awk -F"-" '{print $2}'`
BC=`which bc`
if (( $($BC <<< "$szk<=3.7") > 0 ))
then
	sk=`cat /etc/ssh/sshd_config | grep -i "^KeepAlive" | awk '{print $2}' |uniq |wc -l`
	if [ $sk -gt 0 ]
	then
	szl=`cat /etc/ssh/sshd_config | grep -i "^KeepAlive" | awk '{print $2}' |uniq`
	if [ "$szl" == "yes" ]
	then
		echo "SystemSettings" >>p1
		echo "KeepAlive" >>p3
		echo "KeepAlive_$szl" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.1" >>p12
	else
		echo "SystemSettings" >>p1
		echo "KeepAlive" >>p2
		echo "KeepAlive_$szl" >>p3
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.1" >>p12
	fi
	else
		echo "SystemSettings" >>p1
		echo "KeepAlive" >>p2
		echo "KeepAlive value is set" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.1" >>p12
	fi
else
		echo "SystemSettings" >>p1
		echo "KeepAlive" >>p2
		echo "Applicable-only-for-openssh-versions-3.7-or-less" >>p3
		echo "Not_Applicable" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.1" >>p12
fi

#AV.1.9.1
sz=`rpm -qa |grep -i ssh |grep -i openssh-[0-9].[0-9] | cut -c1,2,3,4,5,6,7,8,9,10,11`
szk=`echo $sz | awk -F"-" '{print $2}'`
BC=`which bc`
if (( $($BC <<< "$szk>=3.5") > 0 ))
then
   sk=`cat /etc/ssh/sshd_config | grep -i "^PermitUserEnvironment" |uniq |wc -l`
   if [ $sk -gt 0 ]
   then
	szl=`cat /etc/ssh/sshd_config | grep -i "^PermitUserEnvironment" | awk '{print $2}' |uniq`
	if [ "$szl" == "$PERMITUSERENVIRONMENT" ]
	then
		echo "Protecting Resources - User Resources" >>p1
		echo "PermitUserEnvironment" >>p2
		echo "PermitUserEnvironment is set as \"$szl\" in /etc/ssh/sshd_config" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.9.1" >>p12
	else
		echo "Protecting Resources - User Resources" >>p1
		echo "PermitUserEnvironment" >>p2
		echo "PermitUserEnvironment is not set in /etc/ssh/sshd_config" >>p3
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.9.1" >>p12
	fi

    else
	szl=`cat /etc/ssh/sshd_config | grep -i "^#PermitUserEnvironment" | awk '{print $2}' |uniq`
	if [ "$szl" == "$PERMITUSERENVIRONMENT" ]
	then
		echo "Protecting Resources - User Resources" >>p1
		echo "PermitUserEnvironment" >>p2
		echo "PermitUserEnvironment is set as \"$szl\" in /etc/ssh/sshd_config" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.9.1" >>p12
	else
		echo "Protecting Resources - User Resources" >>p1
		echo "PermitUserEnvironment" >>p2
		echo "PermitUserEnvironment is not set in /etc/ssh/sshd_config" >>p3
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.9.1" >>p12
	fi
    fi
else
		echo "Protecting Resources - User Resources" >>p1
		echo "PermitUserEnvironment" >>p2
		echo "Applicable-only-for-openssh-version-3.5-and-higher" >>p3
		echo "Not_Applicable" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.9.1" >>p12
fi


#AV.1.9.3
sz=`rpm -qa |grep -i ssh |grep -i openssh-[0-9].[0-9] | cut -c1,2,3,4,5,6,7,8,9,10,11`
szk=`echo $sz | awk -F"-" '{print $2}'`
if (( $(bc <<< "$szk>=3.9") > 0 ))
then
	szl=`cat /etc/ssh/sshd_config | grep -i "^AcceptEnv" | egrep 'TERM|PATH|HOME| MAIL| SHELL| LOGNAME| USER| USERNAME| _RLD*| DYLD_*| LD_*| LDR_*| LIBPATH| SHLIB_PATH'`
	if [ $? -eq 0 ]
	then
		echo "Protecting Resources - User Resources" >>p1
		echo "User Environment variables are not correctly set" >>p3
		echo "AcceptEnv" >>p2
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.9.3" >>p12
	else
		echo "Protecting Resources - User Resources" >>p1
		echo "User Environment variables are correctly set" >>p3
		echo "AcceptEnv" >>p2
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.9.3" >>p12
	fi
else
		echo "Protecting Resources - User Resources" >>p1
		echo "AcceptEnv" >>p2
		echo "Applicable-only-for-openssh-version-3.9-and-higher" >>p3
		echo "Not_Applicable" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.9.3" >>p12
fi

#AV.1.4.2
sz=`rpm -qa |grep -i ssh |grep -i openssh-[0-9].[0-9] | cut -c1,2,3,4,5,6,7,8,9,10,11`
szk=`echo $sz | awk -F"-" '{print $2}'`
BC=`which bc`
if (( $($BC <<< "$szk>=3.8") > 0 ))
then
   sk=`cat /etc/ssh/sshd_config | grep -i "^TCPKeepAlive" |uniq |wc -l`
   if [ $sk -gt 0 ]
   then
	szl=`cat /etc/ssh/sshd_config | grep -i "^TCPKeepAlive" | awk '{print $2}' |uniq`
	if [ "$szl" == "$TCPKEEPALIVE" ]
	then
		echo "System Settings" >>p1
		echo "TCPKeepAlive" >>p2
		echo "Value is set as \"$szl\" in /etc/ssh/sshd_config" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.2" >>p12
	else
		echo "System Settings" >>p1
		echo "TCPKeepAlive" >>p2
		echo "TCPKeepAlive Value-is-not-set in /etc/ssh/sshd_config" >>p3
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.2" >>p12
	fi
   else
	szl=`cat /etc/ssh/sshd_config | grep -i "^#TCPKeepAlive" | awk '{print $2}' |uniq`
	if [ "$szl" == "$TCPKEEPALIVE" ]
	then
		echo "System Settings" >>p1
		echo "TCPKeepAlive" >>p2
		echo "Value is set as \"$szl\" in /etc/ssh/sshd_config" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.2" >>p12
	else
		echo "System Settings" >>p1
		echo "TCPKeepAlive" >>p2
		echo "TCPKeepAlive Value-is-not-set in /etc/ssh/sshd_config" >>p3
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.2" >>p12
	fi
    fi
else
		echo "SystemSettings" >>p1
		echo "TCPKeepAlive" >>p2
		echo "Applicable-only-for-openssh-versions-3.8-and-greater" >>p3
		echo "Not_Applicable" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.2" >>p12
fi


#AV.1.4.4
sz=`rpm -qa |grep -i ssh |grep -i openssh-[0-9].[0-9] | cut -c1,2,3,4,5,6,7`
if [ "$sz" != "openssh" ]
then
	sk=`cat /etc/ssh/sshd_config | grep -i "^MaxConnections" |uniq |wc -l`
	if [ $sk -gt 0 ]
	then
	szl=`cat /etc/ssh/sshd_config | grep -i "^MaxConnections" | awk '{print $2}' |uniq | awk 'FNR  == 1'`
	if [ "$szl" <= "100" ]
	then
		echo "System Settings" >>p1
		echo "MaxConnections" >>p2
		echo "$szl" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.4" >>p12
	else
		echo "System Settings" >>p1
		echo "MaxConnections" >>p2
		echo "Value-is-not-set" >>p3
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.4" >>p12
	fi
	else
		echo "System Settings" >>p1
		echo "MaxConnections" >>p2
		echo "Value-is-set" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.4" >>p12
	fi
else
		echo "System Settings" >>p1
		echo "MaxConnections" >>p2
		echo "Not Applicable-for-OpenSSH" >>p3
		echo "Not_Applicable" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.4" >>p12
fi


#AV.1.4.5
sk=`cat /etc/ssh/sshd_config | grep -i "^MaxStartups" |uniq |wc -l`
if [ $sk -gt 0 ]
then
	szl=`cat /etc/ssh/sshd_config | grep -i "^MaxStartups" | awk '{print $2}' |uniq`
	if [ $szl  -le "$MAXSTARTUPS" ] || [ "$szl" == "10:30:100" ]
	then
		echo "System Settings" >>p1
		echo "MaxStartups" >>p2
		echo "Value is set as \"$szl\" in /etc/ssh/sshd_config" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.5" >>p12
	else
		echo "System Settings" >>p1
		echo "MaxStartups" >>p2
		echo "Value-is-not-set in /etc/ssh/sshd_config" >>p3
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.5" >>p12
	fi
else
	szl=`cat /etc/ssh/sshd_config | grep -i "^#MaxStartups" | awk '{print $2}' |uniq`
	if [ "$szl"  -le "$MAXSTARTUPS" ] || [ "$szl" == "10:30:100" ]
	then
		echo "System Settings" >>p1
		echo "MaxStartups" >>p2
		echo "Value is set as \"$szl\" in /etc/ssh/sshd_config" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.5" >>p12
	else
		echo "System Settings" >>p1
		echo "MaxStartups" >>p2
		echo "Value-is-not-set in /etc/ssh/sshd_config" >>p3
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.5" >>p12
	fi
fi

#AV.1.4.8
sz=`rpm -qa |grep -i ssh |grep -i openssh-[0-9].[0-9] | cut -c1,2,3,4,5,6,7,8,9,10,11`
szk=`echo $sz | awk -F"-" '{print $2}'`
BC=`which bc`
if (( $($BC <<< "$szk>3.9") > 0 ))
then
  sk=`cat /etc/ssh/sshd_config | grep -i "^MaxAuthTries" |uniq |wc -l`
  if [ $sk -gt 0 ]
  then
	szl=`cat /etc/ssh/sshd_config | grep -i "^MaxAuthTries" | awk '{print $2}' |uniq`
	if [ $szl -le $MAXAUTHTRIES ]
	then
		echo "System Settings" >>p1
		echo "MaxAuthTries" >>p2
		echo "Value is set as \"$szl\" in /etc/ssh/sshd_config" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.8" >>p12
	else
		echo "System Settings" >>p1
		echo "MaxAuthTries" >>p2
		echo "Value-is-not-set in /etc/ssh/sshd_config" >>p3
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.8" >>p12
	fi
  else
	szl=`cat /etc/ssh/sshd_config | grep -i "^#MaxAuthTries" | awk '{print $2}' |uniq`
	if [ $szl -le $MAXAUTHTRIES ]
	then
		echo "System Settings" >>p1
		echo "MaxAuthTries" >>p2
		echo "Value is set as \"$szl\" in /etc/ssh/sshd_config" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.8" >>p12
	else
		echo "System Settings" >>p1
		echo "MaxAuthTries" >>p2
		echo "Value-is-not-set in /etc/ssh/sshd_config" >>p3
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.8" >>p12
	fi
  fi
else
		echo "System Settings" >>p1
		echo "MaxAuthTries" >>p2
		echo "Applicable-for-only-openssh3.9-and-greater" >>p3
		echo "Not_Applicable" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.8" >>p12
fi

#AV.1.4.14

sz=`rpm -qa |grep -i ssh |grep -i openssh-[0-9].[0-9] | cut -c1,2,3,4,5,6,7`
if [ "$sz" != "openssh" ]
then
	szl=`cat /etc/ssh/sshd_config | grep -i "^AuthKbdInt.Retries" | awk '{print $2}' |uniq`
	if [ "$szl" <= "5" ]
	then
		echo "System Settings" >>p1
		echo "AuthKbdInt.Retries" >>p2
		echo "Value is set as \"$szl\" in /etc/ssh/sshd_config" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.14" >>p12
	else
		echo "System Settings" >>p1
		echo "AuthKbdInt.Retries" >>p2
		echo "Value-is-not-set" >>p3
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.14" >>p12
	fi
else
		echo "System Settings" >>p1
		echo "AuthKbdInt.Retries" >>p2
		echo "Not Applicable for OpenSSH" >>p3
		echo "Not_Applicable" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.14" >>p12
fi


#AV.1.4.3
sk=`cat /etc/ssh/sshd_config | grep -i "^LoginGraceTime" |uniq |wc -l`
if [ $sk -gt 0 ]
then
	szl=`cat /etc/ssh/sshd_config | grep -i "^LoginGraceTime" | awk '{print $2}' |uniq`
	if [ "$szl" -le "$LOGINGRACETIME" ] || [ "$szl" == "2m" ]
	then
		echo "System Settings" >>p1
		echo "LoginGraceTime" >>p2
		echo "Value is set as \"$szl\" in /etc/ssh/sshd_config" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.3" >>p12
	else
		echo "System Settings" >>p1
		echo "LoginGraceTime" >>p2
		echo "Value-is-not-set in /etc/ssh/sshd_config" >>p3
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.3" >>p12
	fi
else
	szl=`cat /etc/ssh/sshd_config | grep -i "^#LoginGraceTime" | awk '{print $2}' |uniq`
	if [ "$szl" -le "$LOGINGRACETIME" ] || [ "$szl" == 2m ]
	then
		echo "System Settings" >>p1
		echo "LoginGraceTime" >>p2
		echo "Value is set as \"$szl\" in /etc/ssh/sshd_config" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.3" >>p12
	else
		echo "System Settings" >>p1
		echo "LoginGraceTime" >>p2
		echo "Value-is-not-set in /etc/ssh/sshd_config" >>p3
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.4.3" >>p12
	fi
fi

#AV.1.5.1
sk=`cat /etc/ssh/sshd_config | grep -i "^KeyRegenerationInterval" |uniq |wc -l`
if [ $sk -gt 0 ]
then
	szl=`cat /etc/ssh/sshd_config | grep -i "^KeyRegenerationInterval" | awk '{print $2}' |uniq`
	if [ "$szl" -le "$KEYREGENERATIONINTERVAL" ] || [ "$szl" == "1h" ]
	then
		echo "System Settings" >>p1
		echo "KeyRegenerationInterval" >>p2
		echo "Value is set as \"$szl\" in /etc/ssh/sshd_config" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.5.1" >>p12
	else
		echo "System Settings" >>p1
		echo "KeyRegenerationInterval" >>p2
		echo "Value-is-not-set in /etc/ssh/sshd_config" >>p3
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.5.1" >>p12
	fi
else
	szl=`cat /etc/ssh/sshd_config | grep -i "^#KeyRegenerationInterval" | awk '{print $2}' |uniq`
	if [ "$szl" -le "$KEYREGENERATIONINTERVAL" ] || [ "$szl" == "1h" ]
	then
		echo "System Settings" >>p1
		echo "KeyRegenerationInterval" >>p2
		echo "Value is set as \"$szl\" in /etc/ssh/sshd_config" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.5.1" >>p12
	else
		echo "System Settings" >>p1
		echo "KeyRegenerationInterval" >>p2
		echo "Value-is-not-set in /etc/ssh/sshd_config" >>p3
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.5.1" >>p12
	fi
fi

#AV.1.5.2
sk=`cat /etc/ssh/sshd_config | grep -i "^protocol" |uniq |wc -l`
if [ $sk -gt 0 ]
then
	sz=`grep -i ^protocol /etc/ssh/sshd_config | awk 'FNR == 1 {print $2}'` 
	if [ "$sz" == "2" ] || [ "$sz" == "1,2" ] || [ "$sz" == "2,1" ] 
	then
		echo "Network Settingss" >>p1
		echo "SSH-protocol" >>p2
		echo "Value is set as $sz in /etc/ssh/sshd_config" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.5.2" >>p12
	else
		echo "Network Settingss" >>p1
		echo "SSH-protocol" >>p2
		echo "value-should-be-2(or)1,2(or)2,1 in /etc/ssh/sshd_config" >>p3
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.5.2" >>p12
	fi
else
	sz=`grep -i ^#protocol /etc/ssh/sshd_config | awk 'FNR == 1 {print $2}'` 
	if [ "$sz" == "2" ] || [ "$sz" == "1,2" ] || [ "$sz" == "2,1" ] 
	then
		echo "Network Settingss" >>p1
		echo "SSH-protocol" >>p2
		echo "Value is set as $sz in /etc/ssh/sshd_config" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.5.2" >>p12
	else
		echo "Network Settingss" >>p1
		echo "SSH-protocol" >>p2
		echo "Protocol is not set in /etc/ssh/sshd_config" >>p3
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.5.2" >>p12
	fi
fi


#AV.2.1.1.1
sk=`cat /etc/ssh/sshd_config | grep -i "^Protocol" |uniq |wc -l`
if [ $sk -gt 0 ]
then
  sz=`grep -i ^Protocol /etc/ssh/sshd_config | awk 'FNR == 1 {print $2}'` 
  if [ "$sz" == "1" ] || [ "$sz" == "1,2" ] || [ "$sz" == "2,1" ] 
  then
	szl=`cat /etc/ssh/sshd_config | grep -i "^ServerKeyBits" | awk '{print $2}'`
	if [ $szl -ge 1024 ]
	then	
		echo "Encryption" >>p1
		echo "Data Transmission" >>p2
		echo "ServerKeyBits-value-is set as \"$szl\" in /etc/ssh/sshd_config" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.2.1.1.1" >>p12
	else
		echo "Encryption" >>p1
		echo "Data Transmission" >>p2
		echo "ServerKeyBits value must be greater than or equal to 1024" >>p3
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.2.1.1.1" >>p12
	fi
  else

		echo "Encryption" >>p1
		echo "Data Transmission" >>p2
		echo "Not applicable as the SSH protocol version 1 is not enabled" >>p3
		echo "Not_Applicable" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.2.1.1.1" >>p12
  fi		
else
  sz=`grep -i ^#protocol /etc/ssh/sshd_config | awk 'FNR == 1 {print $2}'` 
  if [ "$sz" == "1" ] || [ "$sz" == "1,2" ] || [ "$sz" == "2,1" ] 
  then
	szl=`cat /etc/ssh/sshd_config | grep -i "^ServerKeyBits" | awk '{print $2}'`
	if [ $szl -ge 1024 ]
	then	
		echo "Encryption" >>p1
		echo "Data Transmission" >>p2
		echo "ServerKeyBits-value-is set as \"$szl\" in /etc/ssh/sshd_config" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.2.1.1.1" >>p12
	else
		echo "Encryption" >>p1
		echo "Data Transmission" >>p2
		echo "ServerKeyBits value must be greater than or equal to 1024" >>p3
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.2.1.1.1" >>p12
	fi
  else

		echo "Encryption" >>p1
		echo "Data Transmission" >>p2
		echo "Not applicable as the SSH protocol version 1 is not enabled" >>p3
		echo "Not_Applicable" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.2.1.1.1" >>p12
  fi		

fi

#AV.1.1.1
sk=`cat /etc/ssh/sshd_config | grep -i "^PermitEmptyPasswords" |uniq |wc -l`
if [ $sk -gt 0 ]
then
  sz=`cat /etc/ssh/sshd_config | grep -i "^PermitEmptyPasswords" | awk '{print $2}' |uniq`
  if [ "$sz" == "$PERMITEMPTYPASSWORDS" ]
  then
		echo "Password Requirements" >>p1
        	echo "PermitEmptyPasswords" >>p2
		echo "PermitEmptyPasswords is set as \"$sz\" in /etc/ssh/sshd_config" >> p3
		echo "yes" >>p4
         	echo "$c" >> p5
                echo "$z" >>p6
		echo "AV.1.1.1" >>p12
  else
		echo "Password Requirements" >>p1
        	echo "PermitEmptyPasswords" >>p2
		echo "Value-is-not-set" >> p3
                echo "no" >>p4
                echo "$c" >> p5
                echo "$z" >>p6
		echo "AV.1.1.1" >>p12
  fi
else
  sz=`cat /etc/ssh/sshd_config | grep -i "^#PermitEmptyPasswords" | awk '{print $2}' |uniq`
  if [ "$sz" == "$PERMITEMPTYPASSWORDS" ]
  then
		echo "Password Requirements" >>p1
        	echo "PermitEmptyPasswords" >>p2
		echo "PermitEmptyPasswords is set as \"$sz\" in /etc/ssh/sshd_config" >> p3
		echo "yes" >>p4
         	echo "$c" >> p5
                echo "$z" >>p6
		echo "AV.1.1.1" >>p12
  else
		echo "Password Requirements" >>p1
        	echo "PermitEmptyPasswords" >>p2
		echo "Value-is-not-set" >> p3
                echo "no" >>p4
                echo "$c" >> p5
                echo "$z" >>p6
		echo "AV.1.1.1" >>p12
  fi
fi

#AV.1.7.1.1
sz=`sshd -T |grep -i permitrootlogin | awk '{print $2}' |uniq`
if [ "$sz" == "$PERMITROOTLOGIN" ]
then
		echo "IdentifyandAuthenticateUsers" >>p1
        	echo "PermitRootLogin" >>p2
		echo "PermitRootLogin is set as \"$sz\" in /etc/ssh/sshd_config" >> p3
		echo "yes" >>p4
         	echo "$c" >> p5
                echo "$z" >>p6
		echo "AV.1.7.1.1" >>p12
else
		echo "Password Requirements" >>p1
        	echo "PermitRootLogin" >>p2
		echo "PermitRootLogin is incorrectly set as \"$sz\" in /etc/ssh/sshd_config" >> p3
                echo "no" >>p4
                echo "$c" >> p5
                echo "$z" >>p6
		echo "AV.1.7.1.1" >>p12
fi

#AV.1.2.1.2,AV.1.2.1.3
sk=`cat /etc/ssh/sshd_config | grep -i "^LogLevel" |uniq |wc -l`
if [ $sk -gt 0 ]
then
  sk=`cat /etc/ssh/sshd_config | grep -i "^LogLevel" | awk '{print $2}' |uniq`
  if [ "$sk" == "INFO" ] || [ "$sk" == "DEBUG" ]
  then
		echo "Logging" >>p1
        	echo "LogLevel" >>p2
		echo "LogLevel-set-as \"$sk\" in /etc/ssh/sshd_config" >> p3
		echo "yes" >>p4
         	echo "$c" >> p5
                echo "$z" >>p6
		echo "AV.1.2.1.2;AV.1.2.1.3" >>p12
  else
		echo "Logging" >>p1
        	echo "LogLevel" >>p2
		echo "LogLevel-should-be-set-as-INFO or DEBUG" >> p3
                echo "no" >>p4
                echo "$c" >> p5
                echo "$z" >>p6
		echo "AV.1.2.1.2;AV.1.2.1.3" >>p12
  fi
else
  sk=`cat /etc/ssh/sshd_config | grep -i "^#LogLevel" | awk '{print $2}' |uniq`
  if [ "$sk" == "INFO" ] || [ "$sk" == "DEBUG" ]
  then
		echo "Logging" >>p1
        	echo "LogLevel" >>p2
		echo "LogLevel-set-as \"$sk\" in /etc/ssh/sshd_config" >> p3
		echo "yes" >>p4
         	echo "$c" >> p5
                echo "$z" >>p6
		echo "AV.1.2.1.2;AV.1.2.1.3" >>p12
  else
		echo "Logging" >>p1
        	echo "LogLevel" >>p2
		echo "LogLevel-should-be-set-as-INFO or DEBUG" >> p3
                echo "no" >>p4
                echo "$c" >> p5
                echo "$z" >>p6
		echo "AV.1.2.1.2;AV.1.2.1.3" >>p12
  fi
fi

#AV.1.5.5
sk=`cat /etc/ssh/sshd_config | grep -i "^GatewayPorts" |uniq |wc -l`
if [ $sk -gt 0 ]
then
	sz=`cat /etc/ssh/sshd_config | grep -i "^GatewayPorts" | awk '{print $2}' |uniq`
	if [ "$sz" == "$GATEWAYPORTS" ]
	then
			echo "Network Settingss" >>p1
			echo "GatewayPorts" >>p2
			echo "GatewayPorts is set as \"$sz\" in /etc/ssh/sshd_config" >>p3
			echo "yes" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "AV.1.5.5" >>p12
	else
			echo "Network Settingss" >>p1
			echo "GatewayPorts" >>p2
			echo "Value-is-not-set in /etc/ssh/sshd_config" >>p3
			echo "no" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "AV.1.5.5" >>p12
	fi
else
	sz=`cat /etc/ssh/sshd_config | grep -i "^#GatewayPorts" | awk '{print $2}' |uniq`
	if [ "$sz" == "$GATEWAYPORTS" ]
	then
			echo "Network Settingss" >>p1
			echo "GatewayPorts" >>p2
			echo "GatewayPorts is set as \"$sz\" in /etc/ssh/sshd_config" >>p3
			echo "yes" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "AV.1.5.5" >>p12
	else
			echo "Network Settingss" >>p1
			echo "GatewayPorts" >>p2
			echo "Value-is-not-set in /etc/ssh/sshd_config" >>p3
			echo "no" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "AV.1.5.5" >>p12
	fi
fi


#AV.1.7.3.2
if [ -f /etc/hosts.equiv ]
then
	sk=`cat /etc/hosts.equiv |wc -l`
	if [ $sk -gt 0 ]
	then
		echo "IdentifyandAuthenticateUsers" >>p1
        	echo "Host-Based Authentication" >>p2
		echo "File /etc/hosts.equiv-exist and entries found. Please check the entry  in file and remediate it as per techspec" >> p3
		echo "no" >>p4
         	echo "$c" >> p5
                echo "$z" >>p6
		echo "AV.1.7.3.2" >>p12
	else
		echo "IdentifyandAuthenticateUsers" >>p1
        	echo "Host-Based Authentication" >>p2
		echo "File /etc/hosts.equiv-exist and but no entry found" >> p3
		echo "yes" >>p4
         	echo "$c" >> p5
                echo "$z" >>p6
		echo "AV.1.7.3.2" >>p12
	fi
else
		echo "IdentifyandAuthenticateUsers" >>p1
        	echo "Host-Based Authentication" >>p2
		echo "File /etc/hosts.equiv not exist" >> p3
		echo "yes" >>p4
         	echo "$c" >> p5
                echo "$z" >>p6
		echo "AV.1.7.3.2" >>p12
fi

#AV.1.7.3.3
if [ -f /etc/hosts.equiv ]
then
	if [ -f /etc/shosts.equiv ]
	then
		echo "IdentifyandAuthenticateUsers" >>p1
        	echo "Host-Based Authentication" >>p2
		echo "File /etc/shosts.equiv-exist" >> p3
		echo "yes" >>p4
         	echo "$c" >> p5
                echo "$z" >>p6
		echo "AV.1.7.3.3" >>p12
	else
		echo "IdentifyandAuthenticateUsers" >>p1
        	echo "Host-Based Authentication" >>p2
		echo "File /etc/shosts.equiv must exist as file /etc/hosts.equiv is in use" >> p3
		echo "no" >>p4
         	echo "$c" >> p5
                echo "$z" >>p6
		echo "AV.1.7.3.3" >>p12
	fi
else
		echo "IdentifyandAuthenticateUsers" >>p1
        	echo "Host-Based Authentication" >>p2
		echo "Host based authentication is disabled" >> p3
		echo "yes" >>p4
         	echo "$c" >> p5
                echo "$z" >>p6
		echo "AV.1.7.3.3" >>p12
fi

#AV.1.9.2
sk=`cat /etc/ssh/sshd_config | grep -i "^StrictModes" |uniq |wc -l`
if [ $sk -gt 0 ]
then
	szk=`cat /etc/ssh/sshd_config | grep "^StrictModes" | awk '{print $2}' |uniq`
	if [ "$szk" == "$STRICTMODES" ]
	then
		echo "IdentifyandAuthenticateUsers" >>p1
		echo "StrictModes" >>p2
		echo "StrictModes is set as \"$szk\" in /etc/ssh/sshd_config" >> p3
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "AV.1.9.2" >>p12
	else
		echo "IdentifyandAuthenticateUsers" >>p1
		echo "StrictModes" >>p2
		echo "Value-is-not-set in /etc/ssh/sshd_config" >> p3
		echo "no" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "AV.1.9.2" >>p12
	fi
else
	szk=`cat /etc/ssh/sshd_config | grep "^#StrictModes" | awk '{print $2}' |uniq`
	if [ "$szk" == "$STRICTMODES" ]
	then
		echo "IdentifyandAuthenticateUsers" >>p1
		echo "StrictModes" >>p2
		echo "StrictModes is set as \"$szk\" in /etc/ssh/sshd_config" >> p3
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "AV.1.9.2" >>p12
	else
		echo "IdentifyandAuthenticateUsers" >>p1
		echo "StrictModes" >>p2
		echo "Value-is-not-set in /etc/ssh/sshd_config" >> p3
		echo "no" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "AV.1.9.2" >>p12
	fi
fi

#AV.2.0.1.1
sk=`cat /etc/ssh/sshd_config | grep -i "^PrintMotd" |uniq |wc -l`
if [ $sk -gt 0 ]
then
	szk=`cat /etc/ssh/sshd_config | grep "^PrintMotd" | awk '{print $2}' |uniq`
	if [ "$szk" == "$PRINTMOTD" ]
	then
		echo "Business Use Notice " >>p1
		echo "PrintMotd" >>p2
		echo "PrintMotd is set as \"$szk\" in /etc/ssh/sshd_config" >> p3
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "AV.2.0.1.1" >>p12
	else
		echo "Business Use Notice " >>p1
		echo "PrintMotd" >>p2
		echo "Value-is-not-set in /etc/ssh/sshd_config" >> p3
		echo "no" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "AV.2.0.1.1" >>p12
	fi
else
	szk=`cat /etc/ssh/sshd_config | grep "^#PrintMotd" | awk '{print $2}' |uniq`
	if [ "$szk" == "$PRINTMOTD" ]
	then
		echo "Business Use Notice " >>p1
		echo "PrintMotd" >>p2
		echo "PrintMotd is set as No requirement  in /etc/ssh/sshd_config" >> p3
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "AV.2.0.1.1" >>p12
	else
		echo "Business Use Notice " >>p1
		echo "PrintMotd" >>p2
		echo "Value-is-not-set in /etc/ssh/sshd_config" >> p3
		echo "no" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
		echo "AV.2.0.1.1" >>p12
	fi
fi

#AV.1.8.2.1,AV.1.8.2.2,AV.1.8.2.3,AV.1.8.6.1,AV.1.8.2.4,AV.1.8.2.5,AV.1.8.2.6,AV.1.8.2.7,AV.1.8.2.8,AV.1.8.2.9,AV.1.8.2.10,AV.1.8.2.11,AV.1.8.2.12,AV.1.8.2.13,AV.1.8.2.14,AV.1.8.2.15,AV.1.8.2.16,AV.1.8.2.17,AV.1.8.2.18,AV.1.8.2.19,AV.1.8.2.20,AV.1.8.2.21,AV.1.8.2.22,AV.1.8.2.23,AV.1.8.2.24,AV.1.8.2.25,AV.1.8.2.26,AV.1.8.2.27,AV.1.8.2.28,AV.1.8.2.29,AV.1.8.2.30,AV.1.8.2.31,AV.1.8.2.32,AV.1.8.2.33,AV.1.8.2.34,AV.1.8.2.35,AV.1.8.2.36,AV.1.8.2.37,AV.1.8.2.38,AV.1.8.2.39,AV.1.8.2.40,AV.1.8.2.41,AV.1.8.2.42,AV.1.8.2.43,AV.1.8.2.44,AV.1.8.2.45,AV.1.8.2.46,AV.1.8.2.47,AV.1.8.2.49,AV.1.8.2.50,AV.1.8.3.1,AV.1.8.3.2,AV.1.8.3.3,AV.1.8.3.4,AV.1.8.3.5,AV.1.8.3.6,AV.1.8.3.7,AV.1.8.3.8,AV.1.8.3.9,AV.1.8.3.10

echo "/usr/bin/openssl,/usr/bin/scp,/usr/bin/scp2,/usr/bin/sftp,/usr/bin/sftp2,/usr/bin/sftp-server,/usr/bin/sftp-server2,/usr/bin/slogin,/usr/bin/ssh,/usr/bin/ssh2,/usr/bin/ssh-add,/usr/bin/ssh-add2,/usr/bin/ssh-agent,/usr/bin/ssh-agent2,/usr/bin/ssh-askpass,/usr/bin/ssh-askpass2,/usr/bin/ssh-certenroll2,/usr/bin/ssh-chrootmgr,/usr/bin/ssh-dummy-shell,/usr/bin/ssh-keygen,/usr/bin/ssh-keygen2,/usr/bin/ssh-keyscan,/usr/bin/ssh-pam-client,/usr/bin/ssh-probe,/usr/bin/ssh-probe2,/usr/bin/ssh-pubkeymgr,/usr/bin/ssh-signer,/usr/bin/ssh-signer2,/lib/libcrypto.a,/lib/libssh.a,/lib/libssl.a,/lib/libz.a,/lib-exec/openssh/sftp-server,/lib-exec/openssh/ssh-keysign,/lib-exec/openssh/ssh-askpass,/lib-exec/sftp-server,/lib-exec/ssh-keysign,/lib-exec/ssh-rand-helper,/libexec/openssh/sftp-server,/libexec/openssh/ssh-keysign,/libexec/openssh/ssh-askpass,/libexec/sftp-server,/libexec/ssh-keysign,/libexec/ssh-rand-helper,/usr/bin/sshd,/usr/bin/sshd2,/usr/bin/sshd-check-conf,/lib/svc/method/sshd,/usr/lib/ssh/sshd,/etc/openssh/sshd_config,/etc/ssh/sshd_config,/etc/ssh/sshd2_config,/etc/ssh2/sshd_config,/etc/ssh2/sshd2_config,/etc/sshd_config,/etc/sshd2_config,/usr/local/etc/sshd_config,/usr/local/etc/sshd2_config,/usr/lib/ssh/ssh-keysign" > temp
tr "," "\n" < temp > temp1
for i in `cat temp1`
do
	if [ -f $i ]
        then
	sz=`cat /etc/redhat-release |awk '{print $7}'`
	RELEASE=`cat /etc/redhat-release |awk '{print $1}'`
	if [ "$RELEASE" == "Red" ]
	then
	sj=`ls -ld $i |awk '{print $3}'`
	sk=`ls -ld $i |awk '{print $4}'`
	sl=`id -u $sj`
	sm=`getent group $sk |awk -F: '{print $3}'`
		if [ $sl -le 99 ] || [[ $sl -ge 101 && $sl -le 499 ]]
		then
			echo "Protecting Resources - OSRs" >>p1
			echo "OSR Executable and Libraries" >>p2
			echo "The file $i is owned by $sj - Permission is Valid" >>p3
			echo "yes" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "AV.1.8.2.1,AV.1.8.2.2,AV.1.8.2.3,AV.1.8.6.1,AV.1.8.2.4,AV.1.8.2.5,AV.1.8.2.6,AV.1.8.2.7,AV.1.8.2.8,AV.1.8.2.9,AV.1.8.2.10,AV.1.8.2.11,AV.1.8.2.12,AV.1.8.2.13,AV.1.8.2.14,AV.1.8.2.15,AV.1.8.2.16,AV.1.8.2.17,AV.1.8.2.18,AV.1.8.2.19,AV.1.8.2.20,AV.1.8.2.21,AV.1.8.2.22,AV.1.8.2.23,AV.1.8.2.24,AV.1.8.2.25,AV.1.8.2.26,AV.1.8.2.27,AV.1.8.2.28,AV.1.8.2.29,AV.1.8.2.30,AV.1.8.2.31,AV.1.8.2.32,AV.1.8.2.33,AV.1.8.2.34,AV.1.8.2.35,AV.1.8.2.36,AV.1.8.2.37,AV.1.8.2.38,AV.1.8.2.39,AV.1.8.2.40,AV.1.8.2.41,AV.1.8.2.42,AV.1.8.2.43,AV.1.8.2.44,AV.1.8.2.45,AV.1.8.2.46,AV.1.8.2.47,AV.1.8.2.49,AV.1.8.2.50,AV.1.8.3.1,AV.1.8.3.2,AV.1.8.3.3,AV.1.8.3.4,AV.1.8.3.5,AV.1.8.3.6,AV.1.8.3.7,AV.1.8.3.8,AV.1.8.3.9,AV.1.8.3.10" >>p12
		else
			echo "Protecting Resources - OSRs" >>p1
			echo "OSR Executable and Libraries" >>p2
			echo "The file $i is owned by $sj - Permission is invalid" >>p3
			echo "no" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "AV.1.8.2.1,AV.1.8.2.2,AV.1.8.2.3,AV.1.8.6.1,AV.1.8.2.4,AV.1.8.2.5,AV.1.8.2.6,AV.1.8.2.7,AV.1.8.2.8,AV.1.8.2.9,AV.1.8.2.10,AV.1.8.2.11,AV.1.8.2.12,AV.1.8.2.13,AV.1.8.2.14,AV.1.8.2.15,AV.1.8.2.16,AV.1.8.2.17,AV.1.8.2.18,AV.1.8.2.19,AV.1.8.2.20,AV.1.8.2.21,AV.1.8.2.22,AV.1.8.2.23,AV.1.8.2.24,AV.1.8.2.25,AV.1.8.2.26,AV.1.8.2.27,AV.1.8.2.28,AV.1.8.2.29,AV.1.8.2.30,AV.1.8.2.31,AV.1.8.2.32,AV.1.8.2.33,AV.1.8.2.34,AV.1.8.2.35,AV.1.8.2.36,AV.1.8.2.37,AV.1.8.2.38,AV.1.8.2.39,AV.1.8.2.40,AV.1.8.2.41,AV.1.8.2.42,AV.1.8.2.43,AV.1.8.2.44,AV.1.8.2.45,AV.1.8.2.46,AV.1.8.2.47,AV.1.8.2.49,AV.1.8.2.50,AV.1.8.3.1,AV.1.8.3.2,AV.1.8.3.3,AV.1.8.3.4,AV.1.8.3.5,AV.1.8.3.6,AV.1.8.3.7,AV.1.8.3.8,AV.1.8.3.9,AV.1.8.3.10" >>p12
		fi
		if [ $sm -le 99 ] || [[ $sm -ge 101 && $sm -le 999 ]]
		then
			echo "Protecting Resources - OSRs" >>p1
			echo "OSR Executable and Libraries" >>p2
			echo "Group owner of file $i is $sk - Permission is Valid" >>p3
			echo "yes" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "AV.1.8.2.1,AV.1.8.2.2,AV.1.8.2.3,AV.1.8.6.1,AV.1.8.2.4,AV.1.8.2.5,AV.1.8.2.6,AV.1.8.2.7,AV.1.8.2.8,AV.1.8.2.9,AV.1.8.2.10,AV.1.8.2.11,AV.1.8.2.12,AV.1.8.2.13,AV.1.8.2.14,AV.1.8.2.15,AV.1.8.2.16,AV.1.8.2.17,AV.1.8.2.18,AV.1.8.2.19,AV.1.8.2.20,AV.1.8.2.21,AV.1.8.2.22,AV.1.8.2.23,AV.1.8.2.24,AV.1.8.2.25,AV.1.8.2.26,AV.1.8.2.27,AV.1.8.2.28,AV.1.8.2.29,AV.1.8.2.30,AV.1.8.2.31,AV.1.8.2.32,AV.1.8.2.33,AV.1.8.2.34,AV.1.8.2.35,AV.1.8.2.36,AV.1.8.2.37,AV.1.8.2.38,AV.1.8.2.39,AV.1.8.2.40,AV.1.8.2.41,AV.1.8.2.42,AV.1.8.2.43,AV.1.8.2.44,AV.1.8.2.45,AV.1.8.2.46,AV.1.8.2.47,AV.1.8.2.49,AV.1.8.2.50,AV.1.8.3.1,AV.1.8.3.2,AV.1.8.3.3,AV.1.8.3.4,AV.1.8.3.5,AV.1.8.3.6,AV.1.8.3.7,AV.1.8.3.8,AV.1.8.3.9,AV.1.8.3.10" >>p12
		else
			echo "Protecting Resources - OSRs" >>p1
			echo "OSR Executable and Libraries" >>p2
			echo "Group owner of file $i is $sk - Permission is invalid" >>p3
			echo "no" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "AV.1.8.2.1,AV.1.8.2.2,AV.1.8.2.3,AV.1.8.6.1,AV.1.8.2.4,AV.1.8.2.5,AV.1.8.2.6,AV.1.8.2.7,AV.1.8.2.8,AV.1.8.2.9,AV.1.8.2.10,AV.1.8.2.11,AV.1.8.2.12,AV.1.8.2.13,AV.1.8.2.14,AV.1.8.2.15,AV.1.8.2.16,AV.1.8.2.17,AV.1.8.2.18,AV.1.8.2.19,AV.1.8.2.20,AV.1.8.2.21,AV.1.8.2.22,AV.1.8.2.23,AV.1.8.2.24,AV.1.8.2.25,AV.1.8.2.26,AV.1.8.2.27,AV.1.8.2.28,AV.1.8.2.29,AV.1.8.2.30,AV.1.8.2.31,AV.1.8.2.32,AV.1.8.2.33,AV.1.8.2.34,AV.1.8.2.35,AV.1.8.2.36,AV.1.8.2.37,AV.1.8.2.38,AV.1.8.2.39,AV.1.8.2.40,AV.1.8.2.41,AV.1.8.2.42,AV.1.8.2.43,AV.1.8.2.44,AV.1.8.2.45,AV.1.8.2.46,AV.1.8.2.47,AV.1.8.2.49,AV.1.8.2.50,AV.1.8.3.1,AV.1.8.3.2,AV.1.8.3.3,AV.1.8.3.4,AV.1.8.3.5,AV.1.8.3.6,AV.1.8.3.7,AV.1.8.3.8,AV.1.8.3.9,AV.1.8.3.10" >>p12
		fi
	else
	sz=`cat /etc/redhat-release |awk '{print $7}'`
	RELEASE=`cat /etc/redhat-release |awk '{print $1}'`
	if [ "$RELEASE" == "Red" ]
	then
	sj=`ls -ld $i |awk '{print $3}'`
	sk=`ls -ld $i |awk '{print $4}'`
	sl=`id -u $sj`
	sm=`getent group $sk |awk -F: '{print $3}'`
		if [ $sl -le 99 ] || [[ $sl -ge 101 && $sl -le 499 ]]
		then
			echo "Protecting Resources - OSRs" >>p1
			echo "OSR Executable and Libraries" >>p2
			echo "The file $i is owned by $sj - Permission is Valid" >>p3
			echo "yes" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "AV.1.8.2.1,AV.1.8.2.2,AV.1.8.2.3,AV.1.8.6.1,AV.1.8.2.4,AV.1.8.2.5,AV.1.8.2.6,AV.1.8.2.7,AV.1.8.2.8,AV.1.8.2.9,AV.1.8.2.10,AV.1.8.2.11,AV.1.8.2.12,AV.1.8.2.13,AV.1.8.2.14,AV.1.8.2.15,AV.1.8.2.16,AV.1.8.2.17,AV.1.8.2.18,AV.1.8.2.19,AV.1.8.2.20,AV.1.8.2.21,AV.1.8.2.22,AV.1.8.2.23,AV.1.8.2.24,AV.1.8.2.25,AV.1.8.2.26,AV.1.8.2.27,AV.1.8.2.28,AV.1.8.2.29,AV.1.8.2.30,AV.1.8.2.31,AV.1.8.2.32,AV.1.8.2.33,AV.1.8.2.34,AV.1.8.2.35,AV.1.8.2.36,AV.1.8.2.37,AV.1.8.2.38,AV.1.8.2.39,AV.1.8.2.40,AV.1.8.2.41,AV.1.8.2.42,AV.1.8.2.43,AV.1.8.2.44,AV.1.8.2.45,AV.1.8.2.46,AV.1.8.2.47,AV.1.8.2.49,AV.1.8.2.50,AV.1.8.3.1,AV.1.8.3.2,AV.1.8.3.3,AV.1.8.3.4,AV.1.8.3.5,AV.1.8.3.6,AV.1.8.3.7,AV.1.8.3.8,AV.1.8.3.9,AV.1.8.3.10" >>p12
		else
			echo "Protecting Resources - OSRs" >>p1
			echo "OSR Executable and Libraries" >>p2
			echo "The file $i is owned by $sj - Permission is invalid" >>p3
			echo "no" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "AV.1.8.2.1,AV.1.8.2.2,AV.1.8.2.3,AV.1.8.6.1,AV.1.8.2.4,AV.1.8.2.5,AV.1.8.2.6,AV.1.8.2.7,AV.1.8.2.8,AV.1.8.2.9,AV.1.8.2.10,AV.1.8.2.11,AV.1.8.2.12,AV.1.8.2.13,AV.1.8.2.14,AV.1.8.2.15,AV.1.8.2.16,AV.1.8.2.17,AV.1.8.2.18,AV.1.8.2.19,AV.1.8.2.20,AV.1.8.2.21,AV.1.8.2.22,AV.1.8.2.23,AV.1.8.2.24,AV.1.8.2.25,AV.1.8.2.26,AV.1.8.2.27,AV.1.8.2.28,AV.1.8.2.29,AV.1.8.2.30,AV.1.8.2.31,AV.1.8.2.32,AV.1.8.2.33,AV.1.8.2.34,AV.1.8.2.35,AV.1.8.2.36,AV.1.8.2.37,AV.1.8.2.38,AV.1.8.2.39,AV.1.8.2.40,AV.1.8.2.41,AV.1.8.2.42,AV.1.8.2.43,AV.1.8.2.44,AV.1.8.2.45,AV.1.8.2.46,AV.1.8.2.47,AV.1.8.2.49,AV.1.8.2.50,AV.1.8.3.1,AV.1.8.3.2,AV.1.8.3.3,AV.1.8.3.4,AV.1.8.3.5,AV.1.8.3.6,AV.1.8.3.7,AV.1.8.3.8,AV.1.8.3.9,AV.1.8.3.10" >>p12
		fi
		if [ $sm -le 99 ] || [[ $sm -ge 101 && $sm -le 499 ]]
		then
			echo "Protecting Resources - OSRs" >>p1
			echo "OSR Executable and Libraries" >>p2
			echo "Group owner of file $i is $sk - Permission is Valid" >>p3
			echo "yes" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "AV.1.8.2.1,AV.1.8.2.2,AV.1.8.2.3,AV.1.8.6.1,AV.1.8.2.4,AV.1.8.2.5,AV.1.8.2.6,AV.1.8.2.7,AV.1.8.2.8,AV.1.8.2.9,AV.1.8.2.10,AV.1.8.2.11,AV.1.8.2.12,AV.1.8.2.13,AV.1.8.2.14,AV.1.8.2.15,AV.1.8.2.16,AV.1.8.2.17,AV.1.8.2.18,AV.1.8.2.19,AV.1.8.2.20,AV.1.8.2.21,AV.1.8.2.22,AV.1.8.2.23,AV.1.8.2.24,AV.1.8.2.25,AV.1.8.2.26,AV.1.8.2.27,AV.1.8.2.28,AV.1.8.2.29,AV.1.8.2.30,AV.1.8.2.31,AV.1.8.2.32,AV.1.8.2.33,AV.1.8.2.34,AV.1.8.2.35,AV.1.8.2.36,AV.1.8.2.37,AV.1.8.2.38,AV.1.8.2.39,AV.1.8.2.40,AV.1.8.2.41,AV.1.8.2.42,AV.1.8.2.43,AV.1.8.2.44,AV.1.8.2.45,AV.1.8.2.46,AV.1.8.2.47,AV.1.8.2.49,AV.1.8.2.50,AV.1.8.3.1,AV.1.8.3.2,AV.1.8.3.3,AV.1.8.3.4,AV.1.8.3.5,AV.1.8.3.6,AV.1.8.3.7,AV.1.8.3.8,AV.1.8.3.9,AV.1.8.3.10" >>p12
		else
			echo "Protecting Resources - OSRs" >>p1
			echo "OSR Executable and Libraries" >>p2
			echo "Group owner of file $i is $sk - Permission is invalid" >>p3
			echo "no" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "AV.1.8.2.1,AV.1.8.2.2,AV.1.8.2.3,AV.1.8.6.1,AV.1.8.2.4,AV.1.8.2.5,AV.1.8.2.6,AV.1.8.2.7,AV.1.8.2.8,AV.1.8.2.9,AV.1.8.2.10,AV.1.8.2.11,AV.1.8.2.12,AV.1.8.2.13,AV.1.8.2.14,AV.1.8.2.15,AV.1.8.2.16,AV.1.8.2.17,AV.1.8.2.18,AV.1.8.2.19,AV.1.8.2.20,AV.1.8.2.21,AV.1.8.2.22,AV.1.8.2.23,AV.1.8.2.24,AV.1.8.2.25,AV.1.8.2.26,AV.1.8.2.27,AV.1.8.2.28,AV.1.8.2.29,AV.1.8.2.30,AV.1.8.2.31,AV.1.8.2.32,AV.1.8.2.33,AV.1.8.2.34,AV.1.8.2.35,AV.1.8.2.36,AV.1.8.2.37,AV.1.8.2.38,AV.1.8.2.39,AV.1.8.2.40,AV.1.8.2.41,AV.1.8.2.42,AV.1.8.2.43,AV.1.8.2.44,AV.1.8.2.45,AV.1.8.2.46,AV.1.8.2.47,AV.1.8.2.49,AV.1.8.2.50,AV.1.8.3.1,AV.1.8.3.2,AV.1.8.3.3,AV.1.8.3.4,AV.1.8.3.5,AV.1.8.3.6,AV.1.8.3.7,AV.1.8.3.8,AV.1.8.3.9,AV.1.8.3.10" >>p12
		fi
	else
			echo "Protecting Resources - OSRs" >>p1
			echo "OSR Executable and Libraries" >>p2
			echo "Not applicable as it is not for RHEL6 or RHEL7" >>p3
			echo "Not_Applicable" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "AV.1.8.2.1,AV.1.8.2.2,AV.1.8.2.3,AV.1.8.6.1,AV.1.8.2.4,AV.1.8.2.5,AV.1.8.2.6,AV.1.8.2.7,AV.1.8.2.8,AV.1.8.2.9,AV.1.8.2.10,AV.1.8.2.11,AV.1.8.2.12,AV.1.8.2.13,AV.1.8.2.14,AV.1.8.2.15,AV.1.8.2.16,AV.1.8.2.17,AV.1.8.2.18,AV.1.8.2.19,AV.1.8.2.20,AV.1.8.2.21,AV.1.8.2.22,AV.1.8.2.23,AV.1.8.2.24,AV.1.8.2.25,AV.1.8.2.26,AV.1.8.2.27,AV.1.8.2.28,AV.1.8.2.29,AV.1.8.2.30,AV.1.8.2.31,AV.1.8.2.32,AV.1.8.2.33,AV.1.8.2.34,AV.1.8.2.35,AV.1.8.2.36,AV.1.8.2.37,AV.1.8.2.38,AV.1.8.2.39,AV.1.8.2.40,AV.1.8.2.41,AV.1.8.2.42,AV.1.8.2.43,AV.1.8.2.44,AV.1.8.2.45,AV.1.8.2.46,AV.1.8.2.47,AV.1.8.2.49,AV.1.8.2.50,AV.1.8.3.1,AV.1.8.3.2,AV.1.8.3.3,AV.1.8.3.4,AV.1.8.3.5,AV.1.8.3.6,AV.1.8.3.7,AV.1.8.3.8,AV.1.8.3.9,AV.1.8.3.10" >>p12
	fi
	fi
else
			echo "Protecting Resources - OSRs" >>p1
			echo "OSR Executable and Libraries" >>p2
			echo "Not applicable as file $i not exist" >>p3
			echo "Not_Applicable" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "AV.1.8.2.1,AV.1.8.2.2,AV.1.8.2.3,AV.1.8.6.1,AV.1.8.2.4,AV.1.8.2.5,AV.1.8.2.6,AV.1.8.2.7,AV.1.8.2.8,AV.1.8.2.9,AV.1.8.2.10,AV.1.8.2.11,AV.1.8.2.12,AV.1.8.2.13,AV.1.8.2.14,AV.1.8.2.15,AV.1.8.2.16,AV.1.8.2.17,AV.1.8.2.18,AV.1.8.2.19,AV.1.8.2.20,AV.1.8.2.21,AV.1.8.2.22,AV.1.8.2.23,AV.1.8.2.24,AV.1.8.2.25,AV.1.8.2.26,AV.1.8.2.27,AV.1.8.2.28,AV.1.8.2.29,AV.1.8.2.30,AV.1.8.2.31,AV.1.8.2.32,AV.1.8.2.33,AV.1.8.2.34,AV.1.8.2.35,AV.1.8.2.36,AV.1.8.2.37,AV.1.8.2.38,AV.1.8.2.39,AV.1.8.2.40,AV.1.8.2.41,AV.1.8.2.42,AV.1.8.2.43,AV.1.8.2.44,AV.1.8.2.45,AV.1.8.2.46,AV.1.8.2.47,AV.1.8.2.49,AV.1.8.2.50,AV.1.8.3.1,AV.1.8.3.2,AV.1.8.3.3,AV.1.8.3.4,AV.1.8.3.5,AV.1.8.3.6,AV.1.8.3.7,AV.1.8.3.8,AV.1.8.3.9,AV.1.8.3.10" >>p12
fi
done
rm -rf temp temp1


#AV.1.1.5
echo "Password Requirements" >>p1
echo "Private Key Passphrases" >>p2
echo "No value to be set as per techspec guidelines" >>p3
echo "Not_Applicable" >>p4
echo "$c" >>p5
echo "$z" >>p6
echo "AV.1.1.5" >>p12

#AV.1.1.4
cat /etc/passwd | egrep -v "/sbin/nologin|sync|shutdown|halt|/bin/false"|awk -F":" '{print $6}'>temp_home
for i in `cat temp_home`
do
if [ -f $i/.ssh/id_rsa ]
then
	ssh-keygen -y -P '' -f $i/.ssh/id_rsa
	if [ $? -eq 0 ]
	then
	      	echo "Password Requirements" >>p1
	       	echo "Private Key Passphrase Requirement" >>p2
		echo "SSH Private Key has no passphrase set in user home dir $i/.ssh/id_rsa" >> p3
		echo "No" >>p4
		echo "AV.1.1.4" >>p12
		echo "$c" >> p5
		echo "$z" >>p6
		
		
		
		echo "$timestamp" >>en4
	else
		echo "Password Requirements" >>p1
	       	echo "Private Key Passphrase Requirement" >>p2
		echo "SSH Private Key has passphrase set in user home dir $i/.ssh/id_rsa" >> p3
		echo "Yes" >>p4
		echo "AV.1.1.4" >>p12
		echo "$c" >> p5
		echo "$z" >>p6
		
		
		
		echo "$timestamp" >>en4
	fi
else
		echo "Password Requirements" >>p1
	       	echo "Private Key Passphrase Requirement" >>p2
		echo "SSH Private Key doesn't exist in user home dir $i/.ssh/id_rsa" >> p3
		echo "Yes" >>p4
		echo "AV.1.1.4" >>p12
		echo "$c" >> p5
		echo "$z" >>p6
		
		
		
		echo "$timestamp" >>en4
fi
done


#AV.1.7.1.2
echo "Identify and Authenticate Users" >>p1
echo "Maintain Individual Accountability" >>p2
echo "No value to be set as per techspec" >>p3
echo "$c" >>p5
echo "$z" >>p6
echo "Not_Applicable" >>p4
echo "AV.1.7.1.2" >>p12
		
#AV.1.2.2
sz=`rpm -qa |grep -i ssh |grep -i openssh-[0-9].[0-9] | cut -c1,2,3,4,5,6,7`
if [ "$sz" == "openssh" ]
then
		echo "Logging" >>p1
		echo "QuietMode" >>p2
		echo "Not applicable for OpenSSH" >>p3
		echo "Not_Applicable" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.2.2" >>p12
else
	szl=`cat /etc/ssh/sshd_config | grep -i "^QuietMode" | awk '{print $2}' |uniq`
	if [ "$szl" == "no" ]
	then
		echo "Logging" >>p1
		echo "QuietMode" >>p2
		echo "$szl" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.2.2" >>p12
	else
		echo "Logging" >>p1
		echo "QuietMode" >>p2
		echo "Value-is-not-set" >>p3
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "AV.1.2.2" >>p12
	fi
		
fi

#AV.1.1.7
cat /etc/passwd | awk -F":" '{print $1}' > temp_id
for i in `cat temp_id`
do
	if [ -f /home/$i/.ssh/authorized_keys ]
	then
		A=`id $i | awk '{print $1}' | awk -F"(" '{print $2}' | awk -F")" '{print $1}'`
		B=`id $i | awk '{print $2}' | awk -F"(" '{print $2}' | awk -F")" '{print $1}'`
		sk=`ls -lrt /home/$i/.ssh/id_rsa.pub | awk '{print $3}'`
		sl=`ls -lrt /home/$i/.ssh/id_dsa.pub | awk '{print $4}'`
		if [ "$A" == "$sk" ]
		then
				echo "Password Requirements" >>p1
				echo "Private Key Passphrases - system-to-system authentication" >>p2
				echo "Private-key-is-owned-by-correct-group" >>p3
				echo "yes" >>p4
				echo "$c" >>p5
				echo "$z" >>p6
				echo "AV.1.1.7" >>p12

			
		else
			if [ "$B" == "$sl" ] 
			then
			
				echo "Password Requirements" >>p1
				echo "Private Key Passphrases - system-to-system authentication" >>p2
				echo "ownership-for-/home/$i/.ssh/authorized_keys is $sk:$sl" >>p3
				echo "yes" >>p4
				echo "$c" >>p5
				echo "$z" >>p6
				echo "AV.1.1.7" >>p12
			fi
		fi
	else
				echo "Password Requirements" >>p1
				echo "Private Key Passphrases - system-to-system authentication" >>p2
				echo "/home/$i/.ssh/authorized_keys doesnt exist" >>p3
				echo "yes" >>p4
				echo "$c" >>p5
				echo "$z" >>p6
				echo "AV.1.1.7" >>p12
	fi
done
rm -rf 	temp_id	

#AV.1.1.6
cat /etc/passwd | awk -F":" '{print $1}' > temp_id
for i in `cat temp_id`
do
	if [ -f /home/$i/.ssh/authorized_keys ]
	then
		sk=`cat /home/$i/.ssh/authorized_keys |grep "from=" |wc -l`
		if [ $sk -gt 0 ]
		then
				echo "Password Requirements" >>p1
				echo "Public Key must restrict access only from authorized hosts" >>p2
				echo "The entry "from=" exists in /home/$i/.ssh/authorized_keys for user $i" >>p3
				echo "yes" >>p4
				echo "$c" >>p5
				echo "$z" >>p6
				echo "AV.1.1.6" >>p12
			
		else
	
				echo "Password Requirements" >>p1
				echo "Public Key must restrict access only from authorized hosts" >>p2
				echo "The entry "from=" not exists in /home/$i/.ssh/authorized_keys for user $i" >>p3
				echo "no" >>p4
				echo "$c" >>p5
				echo "$z" >>p6
				echo "AV.1.1.6" >>p12
		fi
	else
				echo "Password Requirements" >>p1
				echo "Public Key must restrict access only from authorized hosts" >>p2
				echo "/home/$i/.ssh/authorized_keys-doesnt-exist" >>p3
				echo "yes" >>p4
				echo "$c" >>p5
				echo "$z" >>p6
				echo "AV.1.1.6" >>p12
	fi
done
rm -rf 	temp_id	

#AV.1.1.2;AV.1.1.3;AV.1.2.3.1;AV.1.2.3.2 ;AV.1.2.3.3;AV.1.2.3.4 ;AV.1.2.3.5;AV.1.2.3.6;AV.1.2.4.1;AV.1.2.4.2;AV.1.2.4.3;AV.1.2.4.4;AV.1.4.6;AV.1.4.7;AV.1.4.9 ;AV.1.4.10;AV.1.4.11;AV.1.4.12;AV.1.4.13;AV.1.4.15 ;AV.1.4.16;AV.1.4.17;AV.1.4.18;AV.1.5.3;AV.1.5.4;AV.1.5.6;AV.1.5.7;AV.1.8.4.1;AV.1.8.4.2;AV.1.8.4.3;AV.1.8.4.4;AV.1.8.4.5;AV.1.8.4.6;AV.1.8.4.7;AV.1.8.5.1;AV.1.8.5.2;AV.1.8.5.3;AV.1.8.5.4;AV.1.8.5.5;AV.1.8.5.6;AV.1.8.5.7;AV.1.8.5.8;AV.1.8.5.10;AV.1.8.5.11;AV.1.8.5.12;AV.1.8.5.13;AV.1.8.5.14;AV.2.0.1.2;AV.2.0.1.3;AV.2.0.1.4;AV.2.1.1.5;AV.2.1.1.6;AV.2.1.1.7;AV.2.2.1.1;AV.2.2.1.2;AV.2.2.1.3;AV.2.2.1.4
	echo "Windows SSH Requirements" >>p1
	echo "SSH Parameter-Windows" >>p2
	echo "These parameters are for Windows" >>p3
	echo "Not_Applicable" >>p4
	echo "AV.1.1.2:AV.1.1.3:AV.1.2.3.1:AV.1.2.3.2:AV.1.2.3.3:AV.1.2.3.4:AV.1.2.3.5:AV.1.2.3.6:AV.1.2.4.1:AV.1.2.4.2:AV.1.2.4.3:AV.1.2.4.4:AV.1.4.6:AV.1.4.7:AV.1.4.9:AV.1.4.10:AV.1.4.11:AV.1.4.12:AV.1.4.13:AV.1.4.15:AV.1.4.16:AV.1.4.17:AV.1.4.18:AV.1.5.3:AV.1.5.4:AV.1.5.6:AV.1.5.7:AV.1.8.4.1:AV.1.8.4.2:AV.1.8.4.3:AV.1.8.4.4:AV.1.8.4.5:AV.1.8.4.6:AV.1.8.4.7:AV.1.8.5.1:AV.1.8.5.2:AV.1.8.5.3:AV.1.8.5.4:AV.1.8.5.5:AV.1.8.5.6:AV.1.8.5.7:AV.1.8.5.8:AV.1.8.5.10:AV.1.8.5.11:AV.1.8.5.12:AV.1.8.5.13:AV.1.8.5.14:AV.2.0.1.2:AV.2.0.1.3:AV.2.0.1.4:AV.2.1.1.5:AV.2.1.1.6:AV.2.1.1.7:AV.2.2.1.1:AV.2.2.1.2:AV.2.2.1.3:AV.2.2.1.4" >>p12


#################################################################################################

######### SUDO HC Script ####################

#################################################################################################

#ZY.1.2.4;AV.1.2.4
sl=`sed -n '/# rotate.log*/,/#.*keep*/p' /etc/logrotate.conf |grep -v '#' |egrep 'monthly|weekly'`
sn=`cat /etc/logrotate.conf |grep -v '#' |grep ^rotate |uniq  |awk '{print $2}'`

if [[ "$sl" == "weekly" && "$sn" -ge "$LOG_ROTATE_WEEK" ]] || [[ "$sl" == "monthly" && "$sn" -ge "$LOG_ROTATE_MONTH" ]]
then
cat /etc/logrotate.conf |grep "^include.*/etc/logrotate.d"
if [ $? -eq 0 ]
then
  sp=`cat /etc/logrotate.d/syslog |grep '^/var/log/secure' |wc -l`
  if [ $sp -gt 0 ]
  then
	sed -n '/\/var\/log\/secure.*{/,/}/p' /etc/logrotate.d/syslog |grep -v '#' > log_file1
	sk=`cat log_file1 |wc -l`
	if [ $sk -gt 0 ]
	then
		sj1=`cat log_file1 |grep rotate |awk '{print $2}'`
		sj2=`cat log_file1 |grep weekly |wc -c`
		sj3=`cat log_file1 |grep monthly |wc -c`
		if [[ $sj1 -ge $LOG_ROTATE_WEEK  &&  $sj2 -gt 1 ]] || [[ $sj1 -ge $LOG_ROTATE_MONTH  &&  $sj3 -gt 1 ]]
		then
			echo "Logging" >>p1
		        echo "Retain Log Files" >>p2
			echo "Logrotate-is-set-as correct for /var/log/secure in-/etc/logrotate.d/syslog" >>p3
			echo "ZY.1.2.4;AV.1.2.4">>p12
			echo "yes" >>p4
			echo "$c" >> p5
			echo "$z" >>p6
		else
			echo "Logging" >>p1
		        echo "Retain Log Files" >>p2
			echo "Logrotate-is-set-as incorrect for /var/log/secure in-/etc/logrotate.d/syslog" >>p3
			echo "ZY.1.2.4;AV.1.2.4">>p12
			echo "no" >>p4
			echo "$c" >> p5
			echo "$z" >>p6
		fi
	else
		echo "Logging" >>p1
                echo "Retain Log Files" >>p2
		echo "Logrotate for /var/log/secure is-set-as correct in /etc/logrotate.d/syslog" >>p3
		echo "ZY.1.2.4;AV.1.2.4">>p12
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
	fi
  else
		echo "Logging" >>p1
                echo "Retain Log Files" >>p2
		echo "Logrotate for /var/log/secure is not set correct in /etc/logrotate.d/syslog" >>p3
		echo "ZY.1.2.4;AV.1.2.4">>p12
		echo "no" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
  fi
else
		echo "Logging" >>p1
                echo "Retain Log Files" >>p2
		echo "'include /etc/logrotate.d' entry not found in /etc/logrotate.conf. Please check logrotate policy manually" >>p3
		echo "ZY.1.2.4;AV.1.2.4">>p12
		echo "no" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
fi
else
cat /etc/logrotate.conf |grep "^include.*/etc/logrotate.d"
if [ $? -eq 0 ]
then
  sp=`cat /etc/logrotate.d/syslog |grep '^/var/log/secure' |wc -l`
  if [ $sp -gt 0 ]
  then
	sed -n '/\/var\/log\/secure.*{/,/}/p' /etc/logrotate.d/syslog |grep -v '#' > log_file1
	sk=`cat log_file1 |wc -l`
	if [ $sk -gt 0 ]
	then
		sj1=`cat log_file1 |grep rotate |awk '{print $2}'`
		sj2=`cat log_file1 |grep weekly |wc -c`
		sj3=`cat log_file1 |grep monthly |wc -c`
		if [[ $sj1 -ge $LOG_ROTATE_WEEK  &&  $sj2 -gt 1 ]] || [[ $sj1 -ge $LOG_ROTATE_MONTH  &&  $sj3 -gt 1 ]]
		then
			echo "Logging" >>p1
		        echo "Retain Log Files" >>p2
			echo "Logrotate-is-set-as correct for /var/log/secure in-/etc/logrotate.d/syslog" >>p3
			echo "ZY.1.2.4;AV.1.2.4">>p12
			echo "yes" >>p4
			echo "$c" >> p5
			echo "$z" >>p6
		else
			echo "Logging" >>p1
		        echo "Retain Log Files" >>p2
			echo "Logrotate-is-set-as incorrect for /var/log/secure in-/etc/logrotate.d/syslog" >>p3
			echo "ZY.1.2.4;AV.1.2.4">>p12
			echo "no" >>p4
			echo "$c" >> p5
			echo "$z" >>p6
		fi
	else
		echo "Logging" >>p1
                echo "Retain Log Files" >>p2
		echo "Logrotate for /var/log/secure is-set-as correct in /etc/logrotate.d/syslog" >>p3
		echo "ZY.1.2.4;AV.1.2.4">>p12
		echo "yes" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
	fi
  else
		echo "Logging" >>p1
                echo "Retain Log Files" >>p2
		echo "Logrotate for /var/log/secure is not set correct in /etc/logrotate.d/syslog" >>p3
		echo "ZY.1.2.4;AV.1.2.4">>p12
		echo "no" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
  fi
else
		echo "Logging" >>p1
                echo "Retain Log Files" >>p2
		echo "'include /etc/logrotate.d' entry not found in /etc/logrotate.conf. Please check logrotate policy manually" >>p3
		echo "ZY.1.2.4;AV.1.2.4">>p12
		echo "no" >>p4
		echo "$c" >> p5
		echo "$z" >>p6
fi
fi
rm -rf log_file1


#ZY.1.4.2.0;#ZY.1.4.2.1
cat /etc/sudoers |grep SHELLESCAPE
if [ $? -eq 0 ]
then
cat /etc/sudoers | grep -i "noexec"
if [ $? -eq 0 ]
then
		echo "System Settings" >>p1
		echo "Commands which allow shell escape" >>p2
		echo "SHELLESCAPE and noexec is enabled in /etc/sudoers" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "ZY.1.4.2.1" >>p12
else
		echo "System Settings" >>p1
		echo "Commands which allow shell escape" >>p2
		echo "SHELLESCAPE is enabled but noexec-is-not-enabled in /etc/sudoers" >>p3
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "ZY.1.4.2.1" >>p12
fi
else
		echo "System Settings" >>p1
		echo "Commands which allow shell escape" >>p2
		echo "SHELLESCAPE-is-not-enabled in /etc/sudoers" >>p3
		echo "no" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "ZY.1.4.2.1" >>p12
fi

#ZY.1.4.2.3
Release=`cat /etc/redhat-release |awk '{print $1}'`
if [ "$Release" != "Red" ]
then
cat /etc/sudoers | grep "Defaults env_file=/etc/sudo.env"
	if [ $? -eq 0 ]
	then
		if [ -f /etc/sudo.env ]
		then
			cat /etc/sudo.env | egrep "^SMIT_SHELL=n|^SMIT_SEMI_COLON=n|^SMIT_QUOTE=n"
			if [ $? -eq 0 ]
			then
				echo "System Settings" >>p1
				echo "Commands which allow shell escape" >>p2
				echo "SMIT-values-found" >>p3
				echo "missing-values-SMIT_SHELL=n|^SMIT_SEMI_COLON=n|^SMIT_QUOTE=n" >>p2
				echo "yes" >>p4
				echo "$c" >>p5
				echo "$z" >>p6
				echo "ZY.1.4.2.3" >>p12
			
			else
				echo "missing-values-SMIT_SHELL=n|^SMIT_SEMI_COLON=n|^SMIT_QUOTE=n" >>p3
				echo "System Settings" >>p1
				echo "Commands which allow shell escape" >>p2
				echo "yes" >>p4
				echo "$c" >>p5
				echo "$z" >>p6
				echo "ZY.1.4.2.3" >>p12
			fi
		else
			echo "System Settings" >>p1
			echo "Commands which allow shell escape" >>p2
			echo "/etc/sudo.env-file-not-found" >>p3
			echo "no" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "ZY.1.4.2.3" >>p12
		fi
	fi
else
			echo "System Settings" >>p1
			echo "Commands which allow shell escape" >>p2
			echo "This-is-not-for-Linux" >>p3
			echo "Not_Applicable" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "ZY.1.4.2.3" >>p12

fi

#ZY.1.4.3.3
sl=`cat /etc/sudoers.d/* |grep -w "Cmnd_Alias.*SUDOSUDO.*=.*/usr/local/bin/sudo,.*/usr/bin/sudo,.*/bin/sudo"|wc -l`
sp=`cat /etc/sudoers |grep -w "Cmnd_Alias.*SUDOSUDO" |grep "=.*/usr/local/bin/sudo,.*/usr/bin/sudo,.*/bin/sudo"|wc -l`
sk=`cat /etc/sudoers |grep -v '#' |grep -v '^$' |tail -1`
#cat /etc/sudoers | grep "^ALL ALL=\!SUDOSUDO"
if [ $sl -ne 0 ] || [ $sp -ne 0 ]
then
	if [[ "$sk" == *"ALL ALL=!SUDOSUDO"* ]]
	then
		    
		    echo "System Settings" >>p1
		    echo "Preventing Nested Sudo invocation" >>p2
		    echo "ALL-ALL=!SUDOSUDO-found in /etc/sudoers" >>p3
		    echo "yes" >>p4
		    echo "$c" >>p5
		    echo "$z" >>p6
		    echo "ZY.1.4.3.3" >>p12
	else
		    
		    echo "System Settings" >>p1
		    echo "Preventing Nested Sudo invocation" >>p2
		    echo "ALL-ALL=!SUDOSUDO-not-found in /etc/sudoers" >>p3
		    echo "no" >>p4
		    echo "$c" >>p5
		    echo "$z" >>p6
		    echo "ZY.1.4.3.3" >>p12
	fi
else
 
            
            echo "System Settings" >>p1
            echo "Preventing Nested Sudo invocation" >>p2
            echo "Cmnd_Alias SUDOSUDO-not-found in /etc/sudoers">>p3
            echo "no" >>p4
            echo "$c" >>p5
            echo "$z" >>p6
            echo "ZY.1.4.3.3" >>p12
fi


#ZY.1.2.3,ZY.1.4.4,ZY.1.2.2
sl=`ls -l /var/log/hist/root/ |wc -c`
if [ "$sl" -gt "0" ] && [ -f /etc/profile.d/secondary_logging_IBM.sh ]
then
			echo "Logging" >>p1
			echo "Secondary logging" >>p2
			echo "Secondary login is in place" >>p3
			echo "yes" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "ZY.1.2.3,ZY.1.4.4,ZY.1.2.2" >>p12
else
	sl1=`ls -ltr /root/.history-sudo-* |wc -l`
	if [ $sl1 -gt 0 ]
	then
			echo "Logging" >>p1
			echo "Secondary logging" >>p2
			echo "Secondary login is in place" >>p3
			echo "yes" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "ZY.1.2.3,ZY.1.4.4,ZY.1.2.2" >>p12
	else		
			echo "Logging" >>p1
			echo "Secondary logging" >>p2
			echo "Secondary login is not in place" >>p3
			echo "no" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "ZY.1.2.3,ZY.1.4.4,ZY.1.2.2" >>p12
	fi
fi

#ZY.1.2.1
sk=`cat /etc/sudoers.d/* |grep "\!logfile" |wc -l`
sl=`cat /etc/sudoers |grep "\!logfile" |wc -l`
if [ $sk -gt 0 ] || [ $sl -gt 0 ]
then
			echo "Logging" >>p1
			echo "Sudo Logging must not be disabled" >>p2
			echo "Sudo logging is disabled" >>p3
			echo "no" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "ZY.1.2.1" >>p12
else
			echo "Logging" >>p1
			echo "Sudo Logging must not be disabled" >>p2
			echo "Sudo logging is not disabled" >>p3
			echo "yes" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "ZY.1.2.1" >>p12
fi

#ZY.1.4.3.1,ZY.1.8.2.1,ZY.1.8.1.2,ZY.1.8.1.4
cat /etc/sudoers |egrep "^#include|^#includedir" |awk '{print $2}' >temp1
cat /etc/sudoers.d/* |egrep "^#include|^#includedir" |awk '{print $2}' >>temp1
for i in `cat temp1`
do
sk=`echo $i |cut -c1`
if [ "$sk" == "/" ]
then
	echo "System Settings" >>p1
	echo "Specific commands/programs executed via sudo:" >>p2
	echo "Full path specified for command \"$i\" in sudoers config file having include or includedir statements" >>p3
	echo "yes" >>p4
	echo "$c" >>p5
	echo "$z" >>p6
	echo "ZY.1.4.3.1,ZY.1.8.2.1,ZY.1.8.1.2,ZY.1.8.1.4" >>p12
else
	echo "System Settings" >>p1
	echo "Specific commands/programs executed via sudo:" >>p2
	echo "Full path not specified for command \"$i\" in sudoers config file having include or includedir statements" >>p3
	echo "no" >>p4
	echo "$c" >>p5
	echo "$z" >>p6
	echo "ZY.1.4.3.1,ZY.1.8.2.1,ZY.1.8.1.2,ZY.1.8.1.4" >>p12
fi
done
rm -rf temp1

#ZY.1.8.1.0
ls -l /etc/sudoers
if [ $? -eq 0 ]
then
	sz=`ls -lrt /etc/sudoers | awk '{print $1}' | cut -c9`
	sz1=`ls -lrt /etc/sudoers | awk '{print $3}'`
	if [ "$sz1" == "root" ] && [ "$sz" != "w" ]
	then
				echo "Protecting Resources - OSRs" >>p1
                echo "/etc/sudoers permission" >>p2
				echo "Permission of /etc/sudoers is valid" >>p3
                echo "yes" >>p4
                echo "$c" >>p5
                echo "$z" >>p6
                echo "ZY.1.8.1.0" >>p12
	else
				echo "Protecting Resources - OSRs" >>p1
                echo "/etc/sudoers permission" >>p2
				echo "Permission of /etc/sudoers is invalid" >>p3
                echo "no" >>p4
                echo "$c" >>p5
                echo "$z" >>p6
                echo "ZY.1.8.1.0" >>p12
	fi
else
				echo "Protecting Resources - OSRs" >>p1
                echo "/etc/sudoers permission" >>p2
				echo "File /etc/sudoers not exist" >>p3
                echo "no" >>p4
                echo "$c" >>p5
                echo "$z" >>p6
                echo "ZY.1.8.1.0" >>p12
fi

#ZY.1.4.5
sk=`cat /etc/sudoers |egrep "/bin/vi|/bin/tvi|/bin/vim|/bin/rvim|/bin/gvim|/bin/evim|/bin/emacs|/bin/ed|/usr/bin/vi|/usr/bin/tvi|/usr/bin/nano|/usr/bin/vim|/usr/bin/rvim|/usr/bin/gvim|/usr/bin/evim|/usr/bin/emacs|/usr/bin/ed|/bin/view|/usr/bin/view|/bin/rvi|/usr/bin/rvi" |wc -l`
sk1=`cat /etc/sudoers.d/* |egrep "/bin/vi|/bin/tvi|/bin/vim|/bin/rvim|/bin/gvim|/bin/evim|/bin/emacs|/bin/ed|/usr/bin/vi|/usr/bin/tvi|/usr/bin/nano|/usr/bin/vim|/usr/bin/rvim|/usr/bin/gvim|/usr/bin/evim|/usr/bin/emacs|/usr/bin/ed|/bin/view|/usr/bin/view|/bin/rvi|/usr/bin/rvi" |wc -l`
if [ $sk -gt 0 ] ||  [ $sk1 -gt 0 ]
then
          echo "System Settings" >>p1
           echo "Editors used with sudo privileges" >>p2
    echo "The sudoedit program is not used when edit privileges are required" >> p3
    echo "No" >>p4
    echo "$c" >> p5
    echo "$z" >>p6
        echo "ZY.1.4.5" >>p12
    
    
    
    echo "$timestamp" >>en4
else
           echo "System Settings" >>p1
           echo "Editors used with sudo privileges" >>p2
    echo "The sudoedit program is used when edit privileges are required" >> p3
    echo "Yes" >>p4
    echo "$c" >> p5
    echo "$z" >>p6
        echo "ZY.1.4.5" >>p12
    
    
    
    echo "$timestamp" >>en4
fi

#ZY.1.8.1.6
cat /etc/sudoers |grep env_file
if [ $? -eq 0 ]
then
	sk=`cat /etc/sudoers |grep "^[^#;]" | grep  env_file | awk -F"=" '{print $2}' | sed 's/\#.*//' | sed -e 's/ //g'`
	ls -ld $sk
	if [ $? -eq 0 ]
	then
		str1=$(ls -ld $sk |awk '{print $3}')
		str2=$(ls -ld $sk |awk '{print $4}')
		if [ "$str1" == "root" ] && [ "$str2" == "root" ]
		then
			echo "Protecting Resources - OSRs" >>p1
			echo "Any file referenced by a  “env_file” directive in the /etc/sudoers" >>p2
			echo "File permission is valid for $sk" >>p3
			echo "yes" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "ZY.1.8.1.6" >>p12
		else
			echo "Protecting Resources - OSRs" >>p1
			echo "Any file referenced by a  “env_file” directive in the /etc/sudoers" >>p2
			echo "File permission is invalid for $sk" >>p3
			echo "no" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "ZY.1.8.1.6" >>p12
		fi
	else
			echo "Protecting Resources - OSRs" >>p1
			echo "Any file referenced by a  “env_file” directive in the /etc/sudoers" >>p2
			echo "Env File $sk not exist" >>p3
			echo "yes" >>p4
			echo "$c" >>p5
			echo "$z" >>p6
			echo "ZY.1.8.1.6" >>p12
	fi
else
		echo "Protecting Resources - OSRs" >>p1
		echo "Any file referenced by a  “env_file” directive in the /etc/sudoers" >>p2
		echo "env_file not exists in /etc/sudoers" >>p3
		echo "yes" >>p4
		echo "$c" >>p5
		echo "$z" >>p6
		echo "ZY.1.8.1.6" >>p12
fi


#ZY.1.8.1.1,ZY.1.8.1.3,ZY.1.8.1.5,ZY.1.8.2.2,ZY.1.8.2.3
sl=`ls -ltr /etc/sudoers.d |wc -l`
file1=`ls -ld /etc/sudoers.d |wc -l`
if [ $file1 -gt 0 ] && [ $sl -gt 1 ]
then
cat /etc/sudoers |egrep "^#include|^#includedir" |awk '{print $2}' >temp1
cat /etc/sudoers.d/* |egrep "^#include|^#includedir" |awk '{print $2}' >>temp1
	sn=`cat temp1 |wc -l`
	if [ $sn -gt 0 ]
	then
	for i in `cat temp1`
	do
		sz=`ls -ld $i | awk '{print $1}' | cut -c9`
		sk=`ls -ld $i | awk '{print $3}'`
		sp=`ls -ld $i | awk '{print $4}'`
		if [ "$sk" == "root" ] && [ "$sz" != "w" ] && [ "$sp" == "root" ]
		then
			echo "Protecting Resources - OSRs" >>p1
		        echo "File permission in /etc/sudoers.d and /etc/sudoers" >>p2
			echo "File permission is valid for $i" >>p3
		        echo "yes" >>p4
		        echo "$c" >>p5
		        echo "$z" >>p6
		        echo "ZY.1.8.1.1,ZY.1.8.1.3,ZY.1.8.1.5,ZY.1.8.2.2,ZY.1.8.2.3" >>p12
		else
			echo "Protecting Resources - OSRs" >>p1
		        echo "File permission in /etc/sudoers.d and /etc/sudoers" >>p2
			echo "File permission is invalid for $i" >>p3
		        echo "no" >>p4
		        echo "$c" >>p5
		        echo "$z" >>p6
		        echo "ZY.1.8.1.1,ZY.1.8.1.3,ZY.1.8.1.5,ZY.1.8.2.2,ZY.1.8.2.3" >>p12
		fi
	done
	else
		echo "Protecting Resources - OSRs" >>p1
                echo "File permission in /etc/sudoers.d and /etc/sudoers" >>p2
		echo "SUDO template not implemented" >>p3
                echo "no" >>p4
                echo "$c" >>p5
                echo "$z" >>p6
                echo "ZY.1.8.1.1,ZY.1.8.1.3,ZY.1.8.1.5,ZY.1.8.2.2,ZY.1.8.2.3" >>p12
	fi

else
		echo "Protecting Resources - OSRs" >>p1
                echo "File permission in /etc/sudoers.d and /etc/sudoers" >>p2
		echo "SUDO template not implemented" >>p3
                echo "no" >>p4
                echo "$c" >>p5
                echo "$z" >>p6
                echo "ZY.1.8.1.1,ZY.1.8.1.3,ZY.1.8.1.5,ZY.1.8.2.2,ZY.1.8.2.3" >>p12
fi
rm -rf temp1



##############################################################################################################
echo -e "ACCOUNT:$accountName-$accountID \nTechSpec Version: $techSpecVersion \nCustomisation Date: $customisedDate \nScan Version: $scanVersion\nFQDN:$fqdn \nIP-ADDRESS:$ipAddress \nOS-NAME: $osName \nScan-Date: $c\nTime-Stamp: $timestamp\n*************************************************************************************" > `hostname`_Linux_SSH_SUDO$c_mhc.csv
paste -d "|" p12 p1 p2 p3 p4   >> `hostname`_Linux_SSH_SUDO$c_mhc.csv
chmod 644 `hostname`_Linux_SSH_SUDO$c_mhc.csv
rm -rf temp_shadow temp_shadow1 temp1_shadow temp_shadow2 temp_shadow3 temp-ud psw_temp temp_uid temp_uid1 temp_gid temp_gid1 pasd_temp en1 en2 en3 en4 p5 p4 p3 p2 p1 p6 p12 f1 t1 temp_pam.so world-writable-test log_file1 temp_id file1 ff2 e1 e2 e3 e4 e5 e6 temp_home user
else
echo "Error: The parameter file hc_remediation_parameter not found. Please copy the file hc_remediation_parameter into same location where HC scan script is available, then run the script again."
fi
